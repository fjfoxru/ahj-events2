(()=>{var e,t,r,n,o,i,a,c={1151:(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}r(8177),r(7327),r(2772),r(4812),r(9070),r(3210),r(3710);var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.details=t,this.id=Math.random()+ +new Date,this.pinned=!1}var t,r;return t=e,(r=[{key:"togglePinned",value:function(){this.pinned=!this.pinned}}])&&n(t.prototype,r),e}();function i(e,t,r){if(t.innerHTML="",e.length)e.forEach((function(n){var o=document.createElement("div");o.dataset.task="",o.dataset.taskId=n.id,o.innerHTML='<div data-section="details">'.concat(n.details,"</div>");var i=document.createElement("div");i.innerHTML='<div data-section="details" class="button_pinned" data-task-id="'.concat(n.id,'" data-action="pin">Закрепить/открепить</div>'),i.addEventListener("click",(function(){var t=e.findIndex((function(e){return e.id===n.id}));-1!==t&&(e[t].togglePinned(),r())})),o.append(i),t.appendChild(o)}));else{console.log("ddd");var n=document.createElement("div");n.innerHTML='<div data-section="details">Нет задач</div>',t.appendChild(n)}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}r(4553),r(9554),r(4747);var c=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.tasks=[],this.containers={tasksListContainer:null,tasksListPinnedContainer:null},this.searchField=""}var t,r;return t=e,(r=[{key:"addTask",value:function(e){this.tasks.push(new o(e)),this.searchField=""}},{key:"buildHtml",value:function(){var e=this.buildHtml.bind(this);i(this.filteredTasks,this.containers.tasksListContainer,e),i(this.pinnedTasks,this.containers.tasksListPinnedContainer,e)}},{key:"commonTasks",get:function(){return this.tasks.filter((function(e){return!e.pinned}))}},{key:"pinnedTasks",get:function(){return this.tasks.filter((function(e){return e.pinned}))}},{key:"filteredTasks",get:function(){if(!this.searchField)return this.commonTasks;var e=this.searchField.trim().toLowerCase();return this.commonTasks.filter((function(t){if(-1!==String(t.details).toLowerCase().indexOf(e))return t}))}}])&&a(t.prototype,r),e}();function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.text=t}var t,r;return t=e,(r=[{key:"errorMoveInHtml",value:function(e){var t=document.createElement("div");t.innerHTML="Внимание: ".concat(this.text),e.append(t)}},{key:"errorClear",value:function(e){e.innerHTML=""}}])&&u(t.prototype,r),e}(),l=document.querySelector("[data-widget=add-task-widget]"),f=document.querySelector('[data-form="add-task"]'),d=l.querySelector("[data-id=add-task-text]"),p=l.querySelector("[data-section=tasks-list]"),h=l.querySelector("[data-section=tasks-list-pinned]"),v=document.querySelector('[data-section="error"]'),m=new c,y=new s;m.containers.tasksListContainer=p,m.containers.tasksListPinnedContainer=h,m.buildHtml(),f.addEventListener("submit",(function(e){e.preventDefault(),d.value?(m.addTask(d.value),d.value="",m.buildHtml()):(y.text="Пустое значение",y.errorMoveInHtml(v))})),f.addEventListener("input",(function(e){m.searchField=e.target.value,y.errorClear(v),m.buildHtml()}))},3099:e=>{e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},1223:(e,t,r)=>{var n=r(5112),o=r(30),i=r(3070),a=n("unscopables"),c=Array.prototype;null==c[a]&&i.f(c,a,{configurable:!0,value:o(null)}),e.exports=function(e){c[a][e]=!0}},9670:(e,t,r)=>{var n=r(111);e.exports=function(e){if(!n(e))throw TypeError(String(e)+" is not an object");return e}},8533:(e,t,r)=>{"use strict";var n=r(2092).forEach,o=r(9341),i=r(9207),a=o("forEach"),c=i("forEach");e.exports=a&&c?[].forEach:function(e){return n(this,e,arguments.length>1?arguments[1]:void 0)}},1318:(e,t,r)=>{var n=r(5656),o=r(7466),i=r(1400),a=function(e){return function(t,r,a){var c,u=n(t),s=o(u.length),l=i(a,s);if(e&&r!=r){for(;s>l;)if((c=u[l++])!=c)return!0}else for(;s>l;l++)if((e||l in u)&&u[l]===r)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},2092:(e,t,r)=>{var n=r(9974),o=r(8361),i=r(7908),a=r(7466),c=r(5417),u=[].push,s=function(e){var t=1==e,r=2==e,s=3==e,l=4==e,f=6==e,d=7==e,p=5==e||f;return function(h,v,m,y){for(var g,b,x=i(h),w=o(x),E=n(v,m,3),S=a(w.length),k=0,O=y||c,j=t?O(h,S):r||d?O(h,0):void 0;S>k;k++)if((p||k in w)&&(b=E(g=w[k],k,x),e))if(t)j[k]=b;else if(b)switch(e){case 3:return!0;case 5:return g;case 6:return k;case 2:u.call(j,g)}else switch(e){case 4:return!1;case 7:u.call(j,g)}return f?-1:s||l?l:j}};e.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6),filterOut:s(7)}},1194:(e,t,r)=>{var n=r(7293),o=r(5112),i=r(7392),a=o("species");e.exports=function(e){return i>=51||!n((function(){var t=[];return(t.constructor={})[a]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},9341:(e,t,r)=>{"use strict";var n=r(7293);e.exports=function(e,t){var r=[][e];return!!r&&n((function(){r.call(null,t||function(){throw 1},1)}))}},9207:(e,t,r)=>{var n=r(9781),o=r(7293),i=r(6656),a=Object.defineProperty,c={},u=function(e){throw e};e.exports=function(e,t){if(i(c,e))return c[e];t||(t={});var r=[][e],s=!!i(t,"ACCESSORS")&&t.ACCESSORS,l=i(t,0)?t[0]:u,f=i(t,1)?t[1]:void 0;return c[e]=!!r&&!o((function(){if(s&&!n)return!0;var e={length:-1};s?a(e,1,{enumerable:!0,get:u}):e[1]=1,r.call(e,l,f)}))}},5417:(e,t,r)=>{var n=r(111),o=r(3157),i=r(5112)("species");e.exports=function(e,t){var r;return o(e)&&("function"!=typeof(r=e.constructor)||r!==Array&&!o(r.prototype)?n(r)&&null===(r=r[i])&&(r=void 0):r=void 0),new(void 0===r?Array:r)(0===t?0:t)}},4326:e=>{var t={}.toString;e.exports=function(e){return t.call(e).slice(8,-1)}},9920:(e,t,r)=>{var n=r(6656),o=r(3887),i=r(1236),a=r(3070);e.exports=function(e,t){for(var r=o(t),c=a.f,u=i.f,s=0;s<r.length;s++){var l=r[s];n(e,l)||c(e,l,u(t,l))}}},8880:(e,t,r)=>{var n=r(9781),o=r(3070),i=r(9114);e.exports=n?function(e,t,r){return o.f(e,t,i(1,r))}:function(e,t,r){return e[t]=r,e}},9114:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},9781:(e,t,r)=>{var n=r(7293);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(e,t,r)=>{var n=r(7854),o=r(111),i=n.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},8324:e=>{e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8113:(e,t,r)=>{var n=r(5005);e.exports=n("navigator","userAgent")||""},7392:(e,t,r)=>{var n,o,i=r(7854),a=r(8113),c=i.process,u=c&&c.versions,s=u&&u.v8;s?o=(n=s.split("."))[0]+n[1]:a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=n[1]),e.exports=o&&+o},748:e=>{e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(e,t,r)=>{var n=r(7854),o=r(1236).f,i=r(8880),a=r(1320),c=r(3505),u=r(9920),s=r(4705);e.exports=function(e,t){var r,l,f,d,p,h=e.target,v=e.global,m=e.stat;if(r=v?n:m?n[h]||c(h,{}):(n[h]||{}).prototype)for(l in t){if(d=t[l],f=e.noTargetGet?(p=o(r,l))&&p.value:r[l],!s(v?l:h+(m?".":"#")+l,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;u(d,f)}(e.sham||f&&f.sham)&&i(d,"sham",!0),a(r,l,d,e)}}},7293:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},9974:(e,t,r)=>{var n=r(3099);e.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 0:return function(){return e.call(t)};case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},7065:(e,t,r)=>{"use strict";var n=r(3099),o=r(111),i=[].slice,a={},c=function(e,t,r){if(!(t in a)){for(var n=[],o=0;o<t;o++)n[o]="a["+o+"]";a[t]=Function("C,a","return new C("+n.join(",")+")")}return a[t](e,r)};e.exports=Function.bind||function(e){var t=n(this),r=i.call(arguments,1),a=function(){var n=r.concat(i.call(arguments));return this instanceof a?c(t,n.length,n):t.apply(e,n)};return o(t.prototype)&&(a.prototype=t.prototype),a}},5005:(e,t,r)=>{var n=r(857),o=r(7854),i=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?i(n[e])||i(o[e]):n[e]&&n[e][t]||o[e]&&o[e][t]}},7854:(e,t,r)=>{var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},6656:e=>{var t={}.hasOwnProperty;e.exports=function(e,r){return t.call(e,r)}},3501:e=>{e.exports={}},490:(e,t,r)=>{var n=r(5005);e.exports=n("document","documentElement")},4664:(e,t,r)=>{var n=r(9781),o=r(7293),i=r(317);e.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:(e,t,r)=>{var n=r(7293),o=r(4326),i="".split;e.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==o(e)?i.call(e,""):Object(e)}:Object},2788:(e,t,r)=>{var n=r(5465),o=Function.toString;"function"!=typeof n.inspectSource&&(n.inspectSource=function(e){return o.call(e)}),e.exports=n.inspectSource},9909:(e,t,r)=>{var n,o,i,a=r(8536),c=r(7854),u=r(111),s=r(8880),l=r(6656),f=r(5465),d=r(6200),p=r(3501),h=c.WeakMap;if(a){var v=f.state||(f.state=new h),m=v.get,y=v.has,g=v.set;n=function(e,t){return t.facade=e,g.call(v,e,t),t},o=function(e){return m.call(v,e)||{}},i=function(e){return y.call(v,e)}}else{var b=d("state");p[b]=!0,n=function(e,t){return t.facade=e,s(e,b,t),t},o=function(e){return l(e,b)?e[b]:{}},i=function(e){return l(e,b)}}e.exports={set:n,get:o,has:i,enforce:function(e){return i(e)?o(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!u(t)||(r=o(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return r}}}},3157:(e,t,r)=>{var n=r(4326);e.exports=Array.isArray||function(e){return"Array"==n(e)}},4705:(e,t,r)=>{var n=r(7293),o=/#|\.prototype\./,i=function(e,t){var r=c[a(e)];return r==s||r!=u&&("function"==typeof t?n(t):!!t)},a=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},c=i.data={},u=i.NATIVE="N",s=i.POLYFILL="P";e.exports=i},111:e=>{e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},1913:e=>{e.exports=!1},133:(e,t,r)=>{var n=r(7293);e.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},8536:(e,t,r)=>{var n=r(7854),o=r(2788),i=n.WeakMap;e.exports="function"==typeof i&&/native code/.test(o(i))},30:(e,t,r)=>{var n,o=r(9670),i=r(6048),a=r(748),c=r(3501),u=r(490),s=r(317),l=r(6200)("IE_PROTO"),f=function(){},d=function(e){return"<script>"+e+"<\/script>"},p=function(){try{n=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;p=n?function(e){e.write(d("")),e.close();var t=e.parentWindow.Object;return e=null,t}(n):((t=s("iframe")).style.display="none",u.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F);for(var r=a.length;r--;)delete p.prototype[a[r]];return p()};c[l]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(f.prototype=o(e),r=new f,f.prototype=null,r[l]=e):r=p(),void 0===t?r:i(r,t)}},6048:(e,t,r)=>{var n=r(9781),o=r(3070),i=r(9670),a=r(1956);e.exports=n?Object.defineProperties:function(e,t){i(e);for(var r,n=a(t),c=n.length,u=0;c>u;)o.f(e,r=n[u++],t[r]);return e}},3070:(e,t,r)=>{var n=r(9781),o=r(4664),i=r(9670),a=r(7593),c=Object.defineProperty;t.f=n?c:function(e,t,r){if(i(e),t=a(t,!0),i(r),o)try{return c(e,t,r)}catch(e){}if("get"in r||"set"in r)throw TypeError("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},1236:(e,t,r)=>{var n=r(9781),o=r(5296),i=r(9114),a=r(5656),c=r(7593),u=r(6656),s=r(4664),l=Object.getOwnPropertyDescriptor;t.f=n?l:function(e,t){if(e=a(e),t=c(t,!0),s)try{return l(e,t)}catch(e){}if(u(e,t))return i(!o.f.call(e,t),e[t])}},8006:(e,t,r)=>{var n=r(6324),o=r(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},5181:(e,t)=>{t.f=Object.getOwnPropertySymbols},6324:(e,t,r)=>{var n=r(6656),o=r(5656),i=r(1318).indexOf,a=r(3501);e.exports=function(e,t){var r,c=o(e),u=0,s=[];for(r in c)!n(a,r)&&n(c,r)&&s.push(r);for(;t.length>u;)n(c,r=t[u++])&&(~i(s,r)||s.push(r));return s}},1956:(e,t,r)=>{var n=r(6324),o=r(748);e.exports=Object.keys||function(e){return n(e,o)}},5296:(e,t)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!r.call({1:2},1);t.f=o?function(e){var t=n(this,e);return!!t&&t.enumerable}:r},3887:(e,t,r)=>{var n=r(5005),o=r(8006),i=r(5181),a=r(9670);e.exports=n("Reflect","ownKeys")||function(e){var t=o.f(a(e)),r=i.f;return r?t.concat(r(e)):t}},857:(e,t,r)=>{var n=r(7854);e.exports=n},1320:(e,t,r)=>{var n=r(7854),o=r(8880),i=r(6656),a=r(3505),c=r(2788),u=r(9909),s=u.get,l=u.enforce,f=String(String).split("String");(e.exports=function(e,t,r,c){var u,s=!!c&&!!c.unsafe,d=!!c&&!!c.enumerable,p=!!c&&!!c.noTargetGet;"function"==typeof r&&("string"!=typeof t||i(r,"name")||o(r,"name",t),(u=l(r)).source||(u.source=f.join("string"==typeof t?t:""))),e!==n?(s?!p&&e[t]&&(d=!0):delete e[t],d?e[t]=r:o(e,t,r)):d?e[t]=r:a(t,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&s(this).source||c(this)}))},4488:e=>{e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},3505:(e,t,r)=>{var n=r(7854),o=r(8880);e.exports=function(e,t){try{o(n,e,t)}catch(r){n[e]=t}return t}},6200:(e,t,r)=>{var n=r(2309),o=r(9711),i=n("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},5465:(e,t,r)=>{var n=r(7854),o=r(3505),i="__core-js_shared__",a=n[i]||o(i,{});e.exports=a},2309:(e,t,r)=>{var n=r(1913),o=r(5465);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.8.3",mode:n?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6091:(e,t,r)=>{var n=r(7293),o=r(1361);e.exports=function(e){return n((function(){return!!o[e]()||"​᠎"!="​᠎"[e]()||o[e].name!==e}))}},3111:(e,t,r)=>{var n=r(4488),o="["+r(1361)+"]",i=RegExp("^"+o+o+"*"),a=RegExp(o+o+"*$"),c=function(e){return function(t){var r=String(n(t));return 1&e&&(r=r.replace(i,"")),2&e&&(r=r.replace(a,"")),r}};e.exports={start:c(1),end:c(2),trim:c(3)}},1400:(e,t,r)=>{var n=r(9958),o=Math.max,i=Math.min;e.exports=function(e,t){var r=n(e);return r<0?o(r+t,0):i(r,t)}},5656:(e,t,r)=>{var n=r(8361),o=r(4488);e.exports=function(e){return n(o(e))}},9958:e=>{var t=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:t)(e)}},7466:(e,t,r)=>{var n=r(9958),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},7908:(e,t,r)=>{var n=r(4488);e.exports=function(e){return Object(n(e))}},7593:(e,t,r)=>{var n=r(111);e.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},9711:e=>{var t=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++t+r).toString(36)}},3307:(e,t,r)=>{var n=r(133);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},5112:(e,t,r)=>{var n=r(7854),o=r(2309),i=r(6656),a=r(9711),c=r(133),u=r(3307),s=o("wks"),l=n.Symbol,f=u?l:l&&l.withoutSetter||a;e.exports=function(e){return i(s,e)||(c&&i(l,e)?s[e]=l[e]:s[e]=f("Symbol."+e)),s[e]}},1361:e=>{e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},7327:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).filter,i=r(1194),a=r(9207),c=i("filter"),u=a("filter");n({target:"Array",proto:!0,forced:!c||!u},{filter:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},4553:(e,t,r)=>{"use strict";var n=r(2109),o=r(2092).findIndex,i=r(1223),a=r(9207),c="findIndex",u=!0,s=a(c);c in[]&&Array(1).findIndex((function(){u=!1})),n({target:"Array",proto:!0,forced:u||!s},{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(c)},9554:(e,t,r)=>{"use strict";var n=r(2109),o=r(8533);n({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},2772:(e,t,r)=>{"use strict";var n=r(2109),o=r(1318).indexOf,i=r(9341),a=r(9207),c=[].indexOf,u=!!c&&1/[1].indexOf(1,-0)<0,s=i("indexOf"),l=a("indexOf",{ACCESSORS:!0,1:0});n({target:"Array",proto:!0,forced:u||!s||!l},{indexOf:function(e){return u?c.apply(this,arguments)||0:o(this,e,arguments.length>1?arguments[1]:void 0)}})},3710:(e,t,r)=>{var n=r(1320),o=Date.prototype,i="Invalid Date",a=o.toString,c=o.getTime;new Date(NaN)+""!=i&&n(o,"toString",(function(){var e=c.call(this);return e==e?a.call(this):i}))},4812:(e,t,r)=>{r(2109)({target:"Function",proto:!0},{bind:r(7065)})},9070:(e,t,r)=>{var n=r(2109),o=r(9781);n({target:"Object",stat:!0,forced:!o,sham:!o},{defineProperty:r(3070).f})},3210:(e,t,r)=>{"use strict";var n=r(2109),o=r(3111).trim;n({target:"String",proto:!0,forced:r(6091)("trim")},{trim:function(){return o(this)}})},4747:(e,t,r)=>{var n=r(7854),o=r(8324),i=r(8533),a=r(8880);for(var c in o){var u=n[c],s=u&&u.prototype;if(s&&s.forEach!==i)try{a(s,"forEach",i)}catch(e){s.forEach=i}}},4783:(e,t,r)=>{"use strict";var n=r(5618),o=Object.create(null),i="undefined"==typeof document,a=Array.prototype.forEach;function c(){}function u(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded=!0,e.parentNode.removeChild(e)})),r.addEventListener("error",(function(){r.isLoaded=!0,e.parentNode.removeChild(e)})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function s(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&u(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),c;var r,f,d=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}o[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=d(t.filename),r=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return a.call(t,(function(t){if(t.href){var o=function(e,t){var r;return e=n(e,{stripWWW:!1}),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);l(o)&&!0!==t.visited&&o&&(u(t,o),r=!0)}})),r}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},50,f=0,function(){var e=this,t=arguments,n=function(){return r.apply(e,t)};clearTimeout(f),f=setTimeout(n,50)}}},5618:e=>{"use strict";e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},8177:(e,t,r)=>{"use strict";var n=r(4783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},u={};function s(e){if(u[e])return u[e].exports;var t=u[e]={id:e,exports:{}},r={id:e,module:t,factory:c[e],require:s};return s.i.forEach((function(e){e(r)})),t=r.module,r.factory.call(t.exports,t,t.exports,r.require),t.exports}s.m=c,s.c=u,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>"main.css",s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"55b6b1b8e915ab07a061",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ajs:",s.l=(r,n,o,i)=>{if(e[r])e[r].push(n);else{var a,c;if(void 0!==o)for(var u=document.getElementsByTagName("script"),l=0;l<u.length;l++){var f=u[l];if(f.getAttribute("src")==r||f.getAttribute("data-webpack")==t+o){a=f;break}}a||(c=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",t+o),a.src=r),e[r]=[n];var d=(t,n)=>{a.onerror=a.onload=null,clearTimeout(p);var o=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(n))),t)return t(n)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),c&&document.head.appendChild(a)}},(()=>{var e,t,r,n,o={},i=s.c,a=[],c=[],u="idle";function l(e){u=e;for(var t=0;t<c.length;t++)c[t].call(null,e)}function f(e){if(0===t.length)return e();var r=t;return t=[],Promise.all(r).then((function(){return f(e)}))}function d(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return l("check"),s.hmrM().then((function(n){if(!n)return l(v()?"ready":"idle"),null;l("prepare");var o=[];return t=[],r=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,t){return s.hmrC[t](n.c,n.r,n.m,e,r,o),e}),[])).then((function(){return f((function(){return e?h(e):(l("ready"),o)}))}))}))}function p(e){return"ready"!==u?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},v();var t=r.map((function(t){return t(e)}));r=void 0;var o,i=t.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return l("abort"),Promise.resolve().then((function(){throw i[0]}));l("dispose"),t.forEach((function(e){e.dispose&&e.dispose()})),l("apply");var a=function(e){o||(o=e)},c=[];return t.forEach((function(e){if(e.apply){var t=e.apply(a);if(t)for(var r=0;r<t.length;r++)c.push(t[r])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):n?h(e).then((function(e){return c.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):(l("idle"),Promise.resolve(c))}function v(){if(n)return r||(r=[]),Object.keys(s.hmrI).forEach((function(e){n.forEach((function(t){s.hmrI[e](t,r)}))})),n=void 0,!0}s.hmrD=o,s.i.push((function(h){var v,m,y,g=h.module,b=function(r,n){var o=i[n];if(!o)return r;var c=function(t){if(o.hot.active){if(i[t]){var c=i[t].parents;-1===c.indexOf(n)&&c.push(n)}else a=[n],e=t;-1===o.children.indexOf(t)&&o.children.push(t)}else console.warn("[HMR] unexpected require("+t+") from disposed module "+n),a=[];return r(t)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var d in r)Object.prototype.hasOwnProperty.call(r,d)&&"e"!==d&&Object.defineProperty(c,d,s(d));return c.e=function(e){return function(e){switch(u){case"ready":return l("prepare"),t.push(e),f((function(){l("ready")})),e;case"prepare":return t.push(e),e;default:return e}}(r.e(e))},c}(h.require,h.id);g.hot=(v=h.id,m=g,y={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==v,_requireSelf:function(){a=m.parents.slice(),e=v,s(v)},active:!0,accept:function(e,t){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._acceptedDependencies[e[r]]=t||function(){};else y._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":r=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](v,r)})),l("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](v,r)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(v)}},check:d,apply:p,status:function(e){if(!e)return u;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:o[v]},e=void 0,y),g.parents=a,g.children=[],a=[],h.require=b})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),r=(e,t,r,n)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)r();else{var a=i&&("load"===i.type?"missing":i.type),c=i&&i.target&&i.target.href||t,u=new Error("Loading CSS chunk "+e+" failed.\n("+c+")");u.code="CSS_CHUNK_LOAD_FAILED",u.type=a,u.request=c,o.parentNode.removeChild(o),n(u)}},o.href=t,document.head.appendChild(o),o},n=(e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(a=r[n]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===t))return a}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var a;if((o=(a=i[n]).getAttribute("data-href"))===e||o===t)return a}},o=[],i=[],a=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var t=o[e];t.parentNode&&t.parentNode.removeChild(t)}o.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),s.hmrC.miniCss=(e,t,c,u,l,f)=>{l.push(a),e.forEach((e=>{var t=s.miniCssF(e),a=s.p+t;const c=n(t,a);c&&u.push(new Promise(((t,n)=>{var u=r(e,a,(()=>{u.as="style",u.rel="preload",t()}),n);o.push(c),i.push(u)})))}))},(()=>{var e,t,r,n,o={179:0},i={};function a(e){return new Promise(((t,r)=>{i[e]=t;var n=s.p+s.hu(e),o=new Error;s.l(n,(t=>{if(i[e]){i[e]=void 0;var n=t&&("load"===t.type?"missing":t.type),a=t&&t.target&&t.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+n+": "+a+")",o.name="ChunkLoadError",o.type=n,o.request=a,r(o)}}))}))}function c(i){function a(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),i=o.id,a=o.chain,u=s.c[i];if(u&&(!u.hot._selfAccepted||u.hot._selfInvalidated)){if(u.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(u.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var l=0;l<u.parents.length;l++){var f=u.parents[l],d=s.c[f];if(d){if(d.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([f]),moduleId:i,parentId:f};-1===t.indexOf(f)&&(d.hot._acceptedDependencies[i]?(r[f]||(r[f]=[]),c(r[f],[i])):(delete r[f],t.push(f),n.push({chain:a.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function c(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}s.f&&delete s.f.jsonpHmr,e=void 0;var u={},l=[],f={},d=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(s.o(t,p)){var h,v=t[p],m=!1,y=!1,g=!1,b="";switch((h=v?a(p):{type:"disposed",moduleId:p}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(h),i.ignoreUnaccepted||(m=new Error("Aborted because "+p+" is not accepted"+b));break;case"accepted":i.onAccepted&&i.onAccepted(h),y=!0;break;case"disposed":i.onDisposed&&i.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(y)for(p in f[p]=v,c(l,h.outdatedModules),h.outdatedDependencies)s.o(h.outdatedDependencies,p)&&(u[p]||(u[p]=[]),c(u[p],h.outdatedDependencies[p]));g&&(c(l,[h.moduleId]),f[p]=d)}t=void 0;for(var x,w=[],E=0;E<l.length;E++){var S=l[E];s.c[S]&&s.c[S].hot._selfAccepted&&f[S]!==d&&!s.c[S].hot._selfInvalidated&&w.push({module:S,require:s.c[S].hot._requireSelf,errorHandler:s.c[S].hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete o[e]})),r=void 0;for(var t,n=l.slice();n.length>0;){var i=n.pop(),a=s.c[i];if(a){var c={},f=a.hot._disposeHandlers;for(E=0;E<f.length;E++)f[E].call(null,c);for(s.hmrD[i]=c,a.hot.active=!1,delete s.c[i],delete u[i],E=0;E<a.children.length;E++){var d=s.c[a.children[E]];d&&(e=d.parents.indexOf(i))>=0&&d.parents.splice(e,1)}}}for(var p in u)if(s.o(u,p)&&(a=s.c[p]))for(x=u[p],E=0;E<x.length;E++)t=x[E],(e=a.children.indexOf(t))>=0&&a.children.splice(e,1)},apply:function(e){for(var t in f)s.o(f,t)&&(s.m[t]=f[t]);for(var r=0;r<n.length;r++)n[r](s);for(var o in u)if(s.o(u,o)){var a=s.c[o];if(a){x=u[o];for(var c=[],d=[],p=0;p<x.length;p++){var h=x[p],v=a.hot._acceptedDependencies[h];if(v){if(-1!==c.indexOf(v))continue;c.push(v),d.push(h)}}for(var m=0;m<c.length;m++)try{c[m].call(null,x)}catch(t){i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:d[m],error:t}),i.ignoreErrored||e(t)}}}for(var y=0;y<w.length;y++){var g=w[y],b=g.module;try{g.require(b)}catch(t){if("function"==typeof g.errorHandler)try{g.errorHandler(t)}catch(r){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:b,error:r,originalError:t}),i.ignoreErrored||e(r),e(t)}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:b,error:t}),i.ignoreErrored||e(t)}}return l}}}self.webpackHotUpdateajs=(e,r,o)=>{for(var a in r)s.o(r,a)&&(t[a]=r[a]);o&&n.push(o),i[e]&&(i[e](),i[e]=void 0)},s.hmrI.jsonp=function(e,o){t||(t={},n=[],r=[],o.push(c)),s.o(t,e)||(t[e]=s.m[e])},s.hmrC.jsonp=function(i,u,l,f,d,p){d.push(c),e={},r=u,t=l.reduce((function(e,t){return e[t]=!1,e}),{}),n=[],i.forEach((function(t){s.o(o,t)&&void 0!==o[t]&&(f.push(a(t)),e[t]=!0)})),s.f&&(s.f.jsonpHmr=function(t,r){e&&!s.o(e,t)&&s.o(o,t)&&void 0!==o[t]&&(r.push(a(t)),e[t]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(1151)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hanMvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL2Fqcy93ZWJwYWNrL3J1bnRpbWUvY3NzIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYWpzLy4vc3JjL2pzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vYWpzLy4vc3JjL2pzL2J1aWxkVGFza3NMaXN0LmpzIiwid2VicGFjazovL2Fqcy8uL3NyYy9qcy90YXNrcy5qcyIsIndlYnBhY2s6Ly9hanMvLi9zcmMvanMvZXJyb3IuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb3duLWtleXMuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VpZC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93aGl0ZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5iaW5kLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIiwid2VicGFjazovL2Fqcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9hanMvLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL25vcm1hbGl6ZS11cmwuanMiLCJ3ZWJwYWNrOi8vYWpzLy4vc3JjL2Nzcy9zdHlsZS5jc3M/NmI3YiIsIndlYnBhY2s6Ly9hanMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCB1cGRhdGUgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9nZXQgbWluaS1jc3MgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9nZXQgdXBkYXRlIG1hbmlmZXN0IGZpbGVuYW1lIiwid2VicGFjazovL2Fqcy93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svcnVudGltZS9ob3QgbW9kdWxlIHJlcGxhY2VtZW50Iiwid2VicGFjazovL2Fqcy93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9hanMvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vYWpzL3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJjcmVhdGVTdHlsZXNoZWV0IiwiZmluZFN0eWxlc2hlZXQiLCJvbGRUYWdzIiwibmV3VGFncyIsImFwcGx5SGFuZGxlciIsIlRhc2siLCJkZXRhaWxzIiwidGhpcyIsImlkIiwiTWF0aCIsInJhbmRvbSIsIkRhdGUiLCJwaW5uZWQiLCJidWlsZFRhc2tzTGlzdCIsImFycmF5TGlzdCIsImNvbnRhaW5lckVsIiwiY2FsbGJhY2siLCJpbm5lckhUTUwiLCJsZW5ndGgiLCJmb3JFYWNoIiwibyIsImVsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZGF0YXNldCIsInRhc2siLCJ0YXNrSWQiLCJidXR0b24iLCJhZGRFdmVudExpc3RlbmVyIiwidGFza1RvUGluIiwiZmluZEluZGV4IiwidG9nZ2xlUGlubmVkIiwiYXBwZW5kIiwiYXBwZW5kQ2hpbGQiLCJjb25zb2xlIiwibG9nIiwiaXRlbSIsIlRhc2tzIiwidGFza3MiLCJjb250YWluZXJzIiwidGFza3NMaXN0Q29udGFpbmVyIiwidGFza3NMaXN0UGlubmVkQ29udGFpbmVyIiwic2VhcmNoRmllbGQiLCJ0YXNrVGV4dCIsInB1c2giLCJjYWxsYmFja0JpbmQiLCJidWlsZEh0bWwiLCJiaW5kIiwiZmlsdGVyZWRUYXNrcyIsInBpbm5lZFRhc2tzIiwiZmlsdGVyIiwiY29tbW9uVGFza3MiLCJzZWFyY2hJbiIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsIlN0cmluZyIsImluZGV4T2YiLCJFcnJvckh0bWwiLCJ0ZXh0IiwiY29udGFpbmVyIiwiZXJyb3IiLCJhZGRUYXNrV2lkZ2V0RWwiLCJxdWVyeVNlbGVjdG9yIiwiYWRkVGFza0Zvcm0iLCJhZGRUYXNrVGV4dEVsIiwidGFza3NMaXN0IiwidGFza3NMaXN0UGlubmVkIiwiYWRkRXJyb3JQbGFjZSIsImFsbFRhc2tzIiwiZSIsInByZXZlbnREZWZhdWx0IiwidmFsdWUiLCJhZGRUYXNrIiwiZXJyb3JNb3ZlSW5IdG1sIiwidGFyZ2V0IiwiZXJyb3JDbGVhciIsIm1vZHVsZSIsImV4cG9ydHMiLCJpdCIsIlR5cGVFcnJvciIsIndlbGxLbm93blN5bWJvbCIsImNyZWF0ZSIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsIkFycmF5IiwicHJvdG90eXBlIiwidW5kZWZpbmVkIiwiZiIsImNvbmZpZ3VyYWJsZSIsImtleSIsImlzT2JqZWN0IiwiJGZvckVhY2giLCJhcnJheU1ldGhvZElzU3RyaWN0IiwiYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgiLCJTVFJJQ1RfTUVUSE9EIiwiVVNFU19UT19MRU5HVEgiLCJjYWxsYmFja2ZuIiwiYXJndW1lbnRzIiwidG9JbmRleGVkT2JqZWN0IiwidG9MZW5ndGgiLCJ0b0Fic29sdXRlSW5kZXgiLCJjcmVhdGVNZXRob2QiLCJJU19JTkNMVURFUyIsIiR0aGlzIiwiZnJvbUluZGV4IiwiTyIsImluZGV4IiwiaW5jbHVkZXMiLCJJbmRleGVkT2JqZWN0IiwidG9PYmplY3QiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJUWVBFIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIklTX0ZJTFRFUl9PVVQiLCJOT19IT0xFUyIsInRoYXQiLCJzcGVjaWZpY0NyZWF0ZSIsInJlc3VsdCIsInNlbGYiLCJib3VuZEZ1bmN0aW9uIiwiY2FsbCIsIm1hcCIsInNvbWUiLCJldmVyeSIsImZpbmQiLCJmaWx0ZXJPdXQiLCJmYWlscyIsIlY4X1ZFUlNJT04iLCJTUEVDSUVTIiwiTUVUSE9EX05BTUUiLCJhcnJheSIsImNvbnN0cnVjdG9yIiwiZm9vIiwiQm9vbGVhbiIsImFyZ3VtZW50IiwibWV0aG9kIiwiREVTQ1JJUFRPUlMiLCJoYXMiLCJkZWZpbmVQcm9wZXJ0eSIsIk9iamVjdCIsImNhY2hlIiwidGhyb3dlciIsIm9wdGlvbnMiLCJBQ0NFU1NPUlMiLCJhcmd1bWVudDAiLCJhcmd1bWVudDEiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiaXNBcnJheSIsIm9yaWdpbmFsQXJyYXkiLCJDIiwidG9TdHJpbmciLCJzbGljZSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJzb3VyY2UiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdCIsImJpdG1hcCIsIndyaXRhYmxlIiwiZ2xvYmFsIiwiRVhJU1RTIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJnZXRCdWlsdEluIiwibWF0Y2giLCJ2ZXJzaW9uIiwidXNlckFnZW50IiwicHJvY2VzcyIsInZlcnNpb25zIiwidjgiLCJzcGxpdCIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsInJlZGVmaW5lIiwic2V0R2xvYmFsIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJzdGF0Iiwibm9UYXJnZXRHZXQiLCJmb3JjZWQiLCJzaGFtIiwiZXhlYyIsImFGdW5jdGlvbiIsImZuIiwiYSIsImIiLCJjIiwiYXBwbHkiLCJmYWN0b3JpZXMiLCJjb25zdHJ1Y3QiLCJhcmdzTGVuZ3RoIiwiYXJncyIsImxpc3QiLCJGdW5jdGlvbiIsImpvaW4iLCJwYXJ0QXJncyIsImNvbmNhdCIsInBhdGgiLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsImciLCJoYXNPd25Qcm9wZXJ0eSIsImNsYXNzb2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInN0b3JlIiwiZnVuY3Rpb25Ub1N0cmluZyIsImluc3BlY3RTb3VyY2UiLCJzZXQiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWQiLCJzaGFyZWRLZXkiLCJoaWRkZW5LZXlzIiwiV2Vha01hcCIsInN0YXRlIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJmYWNhZGUiLCJTVEFURSIsImVuZm9yY2UiLCJnZXR0ZXJGb3IiLCJ0eXBlIiwiYXJnIiwicmVwbGFjZW1lbnQiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwiZGF0YSIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwic3RyaW5nIiwicmVwbGFjZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsIlN5bWJvbCIsInRlc3QiLCJhY3RpdmVYRG9jdW1lbnQiLCJhbk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3QiLCJkb21haW4iLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJzdHlsZSIsImRpc3BsYXkiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIkYiLCJQcm9wZXJ0aWVzIiwib2JqZWN0S2V5cyIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJuYXRpdmVEZWZpbmVQcm9wZXJ0eSIsIlAiLCJBdHRyaWJ1dGVzIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwibmFtZXMiLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiMSIsIlYiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwidW5zYWZlIiwic2ltcGxlIiwidWlkIiwiU0hBUkVEIiwiSVNfUFVSRSIsIm1vZGUiLCJjb3B5cmlnaHQiLCJ3aGl0ZXNwYWNlcyIsIm5hbWUiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwid2hpdGVzcGFjZSIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJzdGFydCIsImVuZCIsInRvSW50ZWdlciIsIm1heCIsIm1pbiIsImludGVnZXIiLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsImlucHV0IiwiUFJFRkVSUkVEX1NUUklORyIsInZhbCIsInZhbHVlT2YiLCJwb3N0Zml4IiwiTkFUSVZFX1NZTUJPTCIsIml0ZXJhdG9yIiwiVVNFX1NZTUJPTF9BU19VSUQiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwiJCIsIiRmaWx0ZXIiLCJhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0IiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsInByb3RvIiwiJGZpbmRJbmRleCIsImFkZFRvVW5zY29wYWJsZXMiLCJGSU5EX0lOREVYIiwiU0tJUFNfSE9MRVMiLCIkaW5kZXhPZiIsIm5hdGl2ZUluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwic2VhcmNoRWxlbWVudCIsIkRhdGVQcm90b3R5cGUiLCJJTlZBTElEX0RBVEUiLCJuYXRpdmVEYXRlVG9TdHJpbmciLCJnZXRUaW1lIiwiTmFOIiwiJHRyaW0iLCJmb3JjZWRTdHJpbmdUcmltTWV0aG9kIiwiRE9NSXRlcmFibGVzIiwiQ09MTEVDVElPTl9OQU1FIiwiQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJub3JtYWxpemVVcmwiLCJzcmNCeU1vZHVsZUlkIiwibm9Eb2N1bWVudCIsIm5vb3AiLCJ1cGRhdGVDc3MiLCJ1cmwiLCJocmVmIiwiaXNVcmxSZXF1ZXN0IiwiaXNMb2FkZWQiLCJ2aXNpdGVkIiwibmV3RWwiLCJjbG9uZU5vZGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJub3ciLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsInJlbG9hZEFsbCIsImVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsIm1vZHVsZUlkIiwidGltZW91dCIsImdldFNjcmlwdFNyYyIsImN1cnJlbnRTY3JpcHQiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsYXN0U2NyaXB0VGFnIiwiZmlsZU1hcCIsInNwbGl0UmVzdWx0IiwiZmlsZW5hbWUiLCJtYXBSdWxlIiwicmVnIiwiZ2V0Q3VycmVudFNjcmlwdFVybCIsInJlbG9hZGVkIiwibG9hZGVkIiwicmV0Iiwic3RyaXBXV1ciLCJnZXRSZWxvYWRVcmwiLCJyZWxvYWRTdHlsZSIsImxvY2FscyIsImZ1bmN0aW9uQ2FsbCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJ1cmxTdHJpbmciLCJwcm90b2NvbCIsImNvbXBvbmVudHMiLCJob3N0IiwicmVkdWNlIiwiYWNjdW11bGF0b3IiLCJwb3AiLCJjc3NSZWxvYWQiLCJob3QiLCJkaXNwb3NlIiwiYWNjZXB0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4ZWNPcHRpb25zIiwiZmFjdG9yeSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJyZXF1aXJlIiwiaGFuZGxlciIsIm0iLCJodSIsImNodW5rSWQiLCJoIiwibWluaUNzc0YiLCJobXJGIiwib2JqIiwicHJvcCIsImwiLCJkb25lIiwic2NyaXB0IiwibmVlZEF0dGFjaCIsInMiLCJnZXRBdHRyaWJ1dGUiLCJjaGFyc2V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsImV2ZW50Iiwib25lcnJvciIsIm9ubG9hZCIsImRvbmVGbnMiLCJoZWFkIiwiY3VycmVudENoaWxkTW9kdWxlIiwiYmxvY2tpbmdQcm9taXNlcyIsImN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzIiwicXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIiwiY3VycmVudE1vZHVsZURhdGEiLCJpbnN0YWxsZWRNb2R1bGVzIiwiY3VycmVudFBhcmVudHMiLCJyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMiLCJjdXJyZW50U3RhdHVzIiwic2V0U3RhdHVzIiwibmV3U3RhdHVzIiwid2FpdEZvckJsb2NraW5nUHJvbWlzZXMiLCJibG9ja2VyIiwiUHJvbWlzZSIsImFsbCIsInRoZW4iLCJob3RDaGVjayIsImFwcGx5T25VcGRhdGUiLCJFcnJvciIsImhtck0iLCJ1cGRhdGUiLCJhcHBseUludmFsaWRhdGVkTW9kdWxlcyIsInVwZGF0ZWRNb2R1bGVzIiwiaG1yQyIsInByb21pc2VzIiwiciIsImludGVybmFsQXBwbHkiLCJob3RBcHBseSIsInJlc29sdmUiLCJyZXN1bHRzIiwiZXJyb3JzIiwicmVwb3J0RXJyb3IiLCJlcnIiLCJvdXRkYXRlZE1vZHVsZXMiLCJtb2R1bGVzIiwiaG1ySSIsImhtckQiLCJtZSIsInJlcXVlc3QiLCJhY3RpdmUiLCJwYXJlbnRzIiwiY2hpbGRyZW4iLCJ3YXJuIiwicHJvbWlzZSIsInRyYWNrQmxvY2tpbmdQcm9taXNlIiwiY3JlYXRlUmVxdWlyZSIsIl9hY2NlcHRlZERlcGVuZGVuY2llcyIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwiX3NlbGZJbnZhbGlkYXRlZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfbWFpbiIsIl9yZXF1aXJlU2VsZiIsImRlcCIsImRlY2xpbmUiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4Iiwic3BsaWNlIiwiaW52YWxpZGF0ZSIsInN0YXR1cyIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwicCIsImZ1bGxocmVmIiwicmVqZWN0IiwibGlua1RhZyIsInJlbCIsImVycm9yVHlwZSIsInJlYWxIcmVmIiwiY29kZSIsImV4aXN0aW5nTGlua1RhZ3MiLCJkYXRhSHJlZiIsInRhZyIsImV4aXN0aW5nU3R5bGVUYWdzIiwib2xkVGFnIiwibWluaUNzcyIsImNodW5rSWRzIiwicmVtb3ZlZENodW5rcyIsInJlbW92ZWRNb2R1bGVzIiwiYXBwbHlIYW5kbGVycyIsInVwZGF0ZWRNb2R1bGVzTGlzdCIsImFzIiwiY3VycmVudFVwZGF0ZUNodW5rcyIsImN1cnJlbnRVcGRhdGUiLCJjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyIsImN1cnJlbnRVcGRhdGVSdW50aW1lIiwiaW5zdGFsbGVkQ2h1bmtzIiwiMTc5Iiwid2FpdGluZ1VwZGF0ZVJlc29sdmVzIiwibG9hZFVwZGF0ZUNodW5rIiwicmVhbFNyYyIsIm1lc3NhZ2UiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwicGFyZW50IiwiYWRkQWxsVG9TZXQiLCJqc29ucEhtciIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJuZXdNb2R1bGVGYWN0b3J5IiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImoiLCJvdXRkYXRlZE1vZHVsZUlkIiwiZXJyb3JIYW5kbGVyIiwiZGVwZW5kZW5jeSIsImRpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwiY2FsbGJhY2tzIiwiZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzIiwiYWNjZXB0Q2FsbGJhY2siLCJrIiwib25FcnJvcmVkIiwiZGVwZW5kZW5jeUlkIiwiaWdub3JlRXJyb3JlZCIsImVycjIiLCJvcmlnaW5hbEVycm9yIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwianNvbnAiLCJmZXRjaCIsInJlc3BvbnNlIiwib2siLCJzdGF0dXNUZXh0IiwianNvbiJdLCJtYXBwaW5ncyI6IlVBQUlBLEVBQ0FDLEVDREFDLEVBMkJBQyxFQXdCQUMsRUFDQUMsRUFDQUMsRSxpUUNyRGlCQyxFLFdBQ25CLFdBQVlDLEksNEZBQVMsU0FDbkJDLEtBQUtELFFBQVVBLEVBQ2ZDLEtBQUtDLEdBQUtDLEtBQUtDLFdBQWEsSUFBSUMsS0FDaENKLEtBQUtLLFFBQVMsRSw0REFJZEwsS0FBS0ssUUFBVUwsS0FBS0ssWSxzQkNSVCxTQUFTQyxFQUFlQyxFQUFXQyxFQUFhQyxHQUU3RCxHQURBRCxFQUFZRSxVQUFZLEdBQ3BCSCxFQUFVSSxPQUNaSixFQUFVSyxTQUFRLFNBQUNDLEdBQ2pCLElBQU1DLEVBQUtDLFNBQVNDLGNBQWMsT0FDbENGLEVBQUdHLFFBQVFDLEtBQU8sR0FDbEJKLEVBQUdHLFFBQVFFLE9BQVNOLEVBQUVaLEdBQ3RCYSxFQUFHSixVQUFILHNDQUE4Q0csRUFBRWQsUUFBaEQsVUFFQSxJQUFNcUIsRUFBU0wsU0FBU0MsY0FBYyxPQUN0Q0ksRUFBT1YsVUFBUCwwRUFBc0ZHLEVBQUVaLEdBQXhGLGlEQUNBbUIsRUFBT0MsaUJBQWlCLFNBQVMsV0FDL0IsSUFBTUMsRUFBWWYsRUFBVWdCLFdBQVUsU0FBQ1QsR0FBRCxPQUFRQSxFQUFHYixLQUFPWSxFQUFFWixPQUN2QyxJQUFmcUIsSUFDRmYsRUFBVWUsR0FBV0UsZUFDckJmLFFBR0pLLEVBQUdXLE9BQU9MLEdBQ1ZaLEVBQVlrQixZQUFZWixVQUVyQixDQUNMYSxRQUFRQyxJQUFJLE9BQ1osSUFBTUMsRUFBT2QsU0FBU0MsY0FBYyxPQUNwQ2EsRUFBS25CLFVBQVksOENBQ2pCRixFQUFZa0IsWUFBWUcsSSxrTUN0QlBDLEUsV0FDbkIsYyw0RkFBYyxTQUNaOUIsS0FBSytCLE1BQVEsR0FDYi9CLEtBQUtnQyxXQUFhLENBQ2hCQyxtQkFBb0IsS0FDcEJDLHlCQUEwQixNQUU1QmxDLEtBQUttQyxZQUFjLEcscURBR2JDLEdBQ05wQyxLQUFLK0IsTUFBTU0sS0FBSyxJQUFJdkMsRUFBS3NDLElBQ3pCcEMsS0FBS21DLFlBQWMsSyxrQ0F5Qm5CLElBQU1HLEVBQWV0QyxLQUFLdUMsVUFBVUMsS0FBS3hDLE1BQ3pDTSxFQUFlTixLQUFLeUMsY0FBZXpDLEtBQUtnQyxXQUFXQyxtQkFBb0JLLEdBQ3ZFaEMsRUFBZU4sS0FBSzBDLFlBQWExQyxLQUFLZ0MsV0FBV0UseUJBQTBCSSxLLGtDQXZCM0UsT0FBT3RDLEtBQUsrQixNQUFNWSxRQUFPLFNBQUM3QixHQUFELE9BQVNBLEVBQUdULFksa0NBSXJDLE9BQU9MLEtBQUsrQixNQUFNWSxRQUFPLFNBQUM3QixHQUFELE9BQVFBLEVBQUdULFksb0NBSXBDLElBQUtMLEtBQUttQyxZQUNSLE9BQU9uQyxLQUFLNEMsWUFFZCxJQUFNQyxFQUFXN0MsS0FBS21DLFlBQVlXLE9BQU9DLGNBTXpDLE9BTGMvQyxLQUFLNEMsWUFBWUQsUUFBTyxTQUFDZCxHQUNyQyxJQUE4RCxJQUExRG1CLE9BQU9uQixFQUFLOUIsU0FBU2dELGNBQWNFLFFBQVFKLEdBQzdDLE9BQU9oQixVLGdNQ2pDTXFCLEUsV0FDbkIsV0FBWUMsSSw0RkFBTSxTQUNoQm5ELEtBQUttRCxLQUFPQSxFLDZEQUdFQyxHQUNkLElBQU1DLEVBQVF0QyxTQUFTQyxjQUFjLE9BQ3JDcUMsRUFBTTNDLFVBQU4sb0JBQStCVixLQUFLbUQsTUFDcENDLEVBQVUzQixPQUFPNEIsSyxpQ0FHUkQsR0FDVEEsRUFBVTFDLFVBQVksUSxzQkNScEI0QyxFQUFrQnZDLFNBQVN3QyxjQUFjLGlDQUV6Q0MsRUFBY3pDLFNBQVN3QyxjQUFjLDBCQUVyQ0UsRUFBZ0JILEVBQWdCQyxjQUFjLDJCQUU5Q0csRUFBWUosRUFBZ0JDLGNBQWMsNkJBRTFDSSxFQUFrQkwsRUFBZ0JDLGNBQWMsb0NBRWhESyxFQUFnQjdDLFNBQVN3QyxjQUFjLDBCQUV2Q00sRUFBVyxJQUFJL0IsRUFDZnVCLEVBQVEsSUFBSUgsRUFHbEJXLEVBQVM3QixXQUFXQyxtQkFBcUJ5QixFQUN6Q0csRUFBUzdCLFdBQVdFLHlCQUEyQnlCLEVBQy9DRSxFQUFTdEIsWUFFVGlCLEVBQVluQyxpQkFBaUIsVUFBVSxTQUFDeUMsR0FDdENBLEVBQUVDLGlCQUNHTixFQUFjTyxPQUlqQkgsRUFBU0ksUUFBUVIsRUFBY08sT0FDL0JQLEVBQWNPLE1BQVEsR0FDdEJILEVBQVN0QixjQUxUYyxFQUFNRixLQUFPLGtCQUNiRSxFQUFNYSxnQkFBZ0JOLE9BUTFCSixFQUFZbkMsaUJBQWlCLFNBQVMsU0FBQ3lDLEdBQ3JDRCxFQUFTMUIsWUFBYzJCLEVBQUVLLE9BQU9ILE1BQ2hDWCxFQUFNZSxXQUFXUixHQUNqQkMsRUFBU3RCLGdCLFNDdkNYOEIsRUFBT0MsUUFBVSxTQUFVQyxHQUN6QixHQUFpQixtQkFBTkEsRUFDVCxNQUFNQyxVQUFVeEIsT0FBT3VCLEdBQU0sc0JBQzdCLE9BQU9BLEksZUNIWCxJQUFJRSxFQUFrQixFQUFRLE1BQzFCQyxFQUFTLEVBQVEsSUFDakJDLEVBQXVCLEVBQVEsTUFFL0JDLEVBQWNILEVBQWdCLGVBQzlCSSxFQUFpQkMsTUFBTUMsVUFJUUMsTUFBL0JILEVBQWVELElBQ2pCRCxFQUFxQk0sRUFBRUosRUFBZ0JELEVBQWEsQ0FDbERNLGNBQWMsRUFDZGxCLE1BQU9VLEVBQU8sUUFLbEJMLEVBQU9DLFFBQVUsU0FBVWEsR0FDekJOLEVBQWVELEdBQWFPLElBQU8sSSxlQ2xCckMsSUFBSUMsRUFBVyxFQUFRLEtBRXZCZixFQUFPQyxRQUFVLFNBQVVDLEdBQ3pCLElBQUthLEVBQVNiLEdBQ1osTUFBTUMsVUFBVXhCLE9BQU91QixHQUFNLHFCQUM3QixPQUFPQSxJLDRCQ0pYLElBQUljLEVBQVcsZ0JBQ1hDLEVBQXNCLEVBQVEsTUFDOUJDLEVBQTBCLEVBQVEsTUFFbENDLEVBQWdCRixFQUFvQixXQUNwQ0csRUFBaUJGLEVBQXdCLFdBSTdDbEIsRUFBT0MsUUFBWWtCLEdBQWtCQyxFQUVqQyxHQUFHN0UsUUFGZ0QsU0FBaUI4RSxHQUN0RSxPQUFPTCxFQUFTckYsS0FBTTBGLEVBQVlDLFVBQVVoRixPQUFTLEVBQUlnRixVQUFVLFFBQUtYLEssZUNYMUUsSUFBSVksRUFBa0IsRUFBUSxNQUMxQkMsRUFBVyxFQUFRLE1BQ25CQyxFQUFrQixFQUFRLE1BRzFCQyxFQUFlLFNBQVVDLEdBQzNCLE9BQU8sU0FBVUMsRUFBT25GLEVBQUlvRixHQUMxQixJQUdJbEMsRUFIQW1DLEVBQUlQLEVBQWdCSyxHQUNwQnRGLEVBQVNrRixFQUFTTSxFQUFFeEYsUUFDcEJ5RixFQUFRTixFQUFnQkksRUFBV3ZGLEdBSXZDLEdBQUlxRixHQUFlbEYsR0FBTUEsR0FBSSxLQUFPSCxFQUFTeUYsR0FHM0MsSUFGQXBDLEVBQVFtQyxFQUFFQyxPQUVHcEMsRUFBTyxPQUFPLE9BRXRCLEtBQU1yRCxFQUFTeUYsRUFBT0EsSUFDM0IsSUFBS0osR0FBZUksS0FBU0QsSUFBTUEsRUFBRUMsS0FBV3RGLEVBQUksT0FBT2tGLEdBQWVJLEdBQVMsRUFDbkYsT0FBUUosSUFBZ0IsSUFJOUIzQixFQUFPQyxRQUFVLENBR2YrQixTQUFVTixHQUFhLEdBR3ZCOUMsUUFBUzhDLEdBQWEsSyxlQzlCeEIsSUFBSXZELEVBQU8sRUFBUSxNQUNmOEQsRUFBZ0IsRUFBUSxNQUN4QkMsRUFBVyxFQUFRLE1BQ25CVixFQUFXLEVBQVEsTUFDbkJXLEVBQXFCLEVBQVEsTUFFN0JuRSxFQUFPLEdBQUdBLEtBR1YwRCxFQUFlLFNBQVVVLEdBQzNCLElBQUlDLEVBQWlCLEdBQVJELEVBQ1RFLEVBQW9CLEdBQVJGLEVBQ1pHLEVBQWtCLEdBQVJILEVBQ1ZJLEVBQW1CLEdBQVJKLEVBQ1hLLEVBQXdCLEdBQVJMLEVBQ2hCTSxFQUF3QixHQUFSTixFQUNoQk8sRUFBbUIsR0FBUlAsR0FBYUssRUFDNUIsT0FBTyxTQUFVYixFQUFPUCxFQUFZdUIsRUFBTUMsR0FTeEMsSUFSQSxJQU9JbEQsRUFBT21ELEVBUFBoQixFQUFJSSxFQUFTTixHQUNibUIsRUFBT2QsRUFBY0gsR0FDckJrQixFQUFnQjdFLEVBQUtrRCxFQUFZdUIsRUFBTSxHQUN2Q3RHLEVBQVNrRixFQUFTdUIsRUFBS3pHLFFBQ3ZCeUYsRUFBUSxFQUNSMUIsRUFBU3dDLEdBQWtCVixFQUMzQnJDLEVBQVN1QyxFQUFTaEMsRUFBT3VCLEVBQU90RixHQUFVZ0csR0FBYUksRUFBZ0JyQyxFQUFPdUIsRUFBTyxRQUFLakIsRUFFeEZyRSxFQUFTeUYsRUFBT0EsSUFBUyxJQUFJWSxHQUFZWixLQUFTZ0IsS0FFdERELEVBQVNFLEVBRFRyRCxFQUFRb0QsRUFBS2hCLEdBQ2lCQSxFQUFPRCxHQUNqQ00sR0FDRixHQUFJQyxFQUFRdkMsRUFBT2lDLEdBQVNlLE9BQ3ZCLEdBQUlBLEVBQVEsT0FBUVYsR0FDdkIsS0FBSyxFQUFHLE9BQU8sRUFDZixLQUFLLEVBQUcsT0FBT3pDLEVBQ2YsS0FBSyxFQUFHLE9BQU9vQyxFQUNmLEtBQUssRUFBRy9ELEVBQUtpRixLQUFLbkQsRUFBUUgsUUFDckIsT0FBUXlDLEdBQ2IsS0FBSyxFQUFHLE9BQU8sRUFDZixLQUFLLEVBQUdwRSxFQUFLaUYsS0FBS25ELEVBQVFILEdBSWhDLE9BQU84QyxHQUFpQixFQUFJRixHQUFXQyxFQUFXQSxFQUFXMUMsSUFJakVFLEVBQU9DLFFBQVUsQ0FHZjFELFFBQVNtRixFQUFhLEdBR3RCd0IsSUFBS3hCLEVBQWEsR0FHbEJwRCxPQUFRb0QsRUFBYSxHQUdyQnlCLEtBQU16QixFQUFhLEdBR25CMEIsTUFBTzFCLEVBQWEsR0FHcEIyQixLQUFNM0IsRUFBYSxHQUduQnhFLFVBQVd3RSxFQUFhLEdBR3hCNEIsVUFBVzVCLEVBQWEsSyxlQ3RFMUIsSUFBSTZCLEVBQVEsRUFBUSxNQUNoQm5ELEVBQWtCLEVBQVEsTUFDMUJvRCxFQUFhLEVBQVEsTUFFckJDLEVBQVVyRCxFQUFnQixXQUU5QkosRUFBT0MsUUFBVSxTQUFVeUQsR0FJekIsT0FBT0YsR0FBYyxLQUFPRCxHQUFNLFdBQ2hDLElBQUlJLEVBQVEsR0FLWixPQUprQkEsRUFBTUMsWUFBYyxJQUMxQkgsR0FBVyxXQUNyQixNQUFPLENBQUVJLElBQUssSUFFMkIsSUFBcENGLEVBQU1ELEdBQWFJLFNBQVNELFMsNEJDZnZDLElBQUlOLEVBQVEsRUFBUSxNQUVwQnZELEVBQU9DLFFBQVUsU0FBVXlELEVBQWFLLEdBQ3RDLElBQUlDLEVBQVMsR0FBR04sR0FDaEIsUUFBU00sR0FBVVQsR0FBTSxXQUV2QlMsRUFBT2YsS0FBSyxLQUFNYyxHQUFZLFdBQWMsTUFBTSxHQUFNLFEsZUNQNUQsSUFBSUUsRUFBYyxFQUFRLE1BQ3RCVixFQUFRLEVBQVEsTUFDaEJXLEVBQU0sRUFBUSxNQUVkQyxFQUFpQkMsT0FBT0QsZUFDeEJFLEVBQVEsR0FFUkMsRUFBVSxTQUFVcEUsR0FBTSxNQUFNQSxHQUVwQ0YsRUFBT0MsUUFBVSxTQUFVeUQsRUFBYWEsR0FDdEMsR0FBSUwsRUFBSUcsRUFBT1gsR0FBYyxPQUFPVyxFQUFNWCxHQUNyQ2EsSUFBU0EsRUFBVSxJQUN4QixJQUFJUCxFQUFTLEdBQUdOLEdBQ1pjLElBQVlOLEVBQUlLLEVBQVMsY0FBZUEsRUFBUUMsVUFDaERDLEVBQVlQLEVBQUlLLEVBQVMsR0FBS0EsRUFBUSxHQUFLRCxFQUMzQ0ksRUFBWVIsRUFBSUssRUFBUyxHQUFLQSxFQUFRLFFBQUs1RCxFQUUvQyxPQUFPMEQsRUFBTVgsS0FBaUJNLElBQVdULEdBQU0sV0FDN0MsR0FBSWlCLElBQWNQLEVBQWEsT0FBTyxFQUN0QyxJQUFJbkMsRUFBSSxDQUFFeEYsUUFBUyxHQUVma0ksRUFBV0wsRUFBZXJDLEVBQUcsRUFBRyxDQUFFNkMsWUFBWSxFQUFNQyxJQUFLTixJQUN4RHhDLEVBQUUsR0FBSyxFQUVaa0MsRUFBT2YsS0FBS25CLEVBQUcyQyxFQUFXQyxRLGVDeEI5QixJQUFJM0QsRUFBVyxFQUFRLEtBQ25COEQsRUFBVSxFQUFRLE1BR2xCcEIsRUFGa0IsRUFBUSxLQUVoQnJELENBQWdCLFdBSTlCSixFQUFPQyxRQUFVLFNBQVU2RSxFQUFleEksR0FDeEMsSUFBSXlJLEVBU0YsT0FSRUYsRUFBUUMsS0FHTSxtQkFGaEJDLEVBQUlELEVBQWNsQixjQUVhbUIsSUFBTXRFLFFBQVNvRSxFQUFRRSxFQUFFckUsV0FDL0NLLEVBQVNnRSxJQUVOLFFBRFZBLEVBQUlBLEVBQUV0QixNQUNVc0IsT0FBSXBFLEdBSCtDb0UsT0FBSXBFLEdBS2xFLFNBQVdBLElBQU5vRSxFQUFrQnRFLE1BQVFzRSxHQUFjLElBQVh6SSxFQUFlLEVBQUlBLEssU0NsQmhFLElBQUkwSSxFQUFXLEdBQUdBLFNBRWxCaEYsRUFBT0MsUUFBVSxTQUFVQyxHQUN6QixPQUFPOEUsRUFBUy9CLEtBQUsvQyxHQUFJK0UsTUFBTSxHQUFJLEssZUNIckMsSUFBSWYsRUFBTSxFQUFRLE1BQ2RnQixFQUFVLEVBQVEsTUFDbEJDLEVBQWlDLEVBQVEsTUFDekM3RSxFQUF1QixFQUFRLE1BRW5DTixFQUFPQyxRQUFVLFNBQVVILEVBQVFzRixHQUlqQyxJQUhBLElBQUlDLEVBQU9ILEVBQVFFLEdBQ2ZqQixFQUFpQjdELEVBQXFCTSxFQUN0QzBFLEVBQTJCSCxFQUErQnZFLEVBQ3JEMkUsRUFBSSxFQUFHQSxFQUFJRixFQUFLL0ksT0FBUWlKLElBQUssQ0FDcEMsSUFBSXpFLEVBQU11RSxFQUFLRSxHQUNWckIsRUFBSXBFLEVBQVFnQixJQUFNcUQsRUFBZXJFLEVBQVFnQixFQUFLd0UsRUFBeUJGLEVBQVF0RSxPLGVDWHhGLElBQUltRCxFQUFjLEVBQVEsTUFDdEIzRCxFQUF1QixFQUFRLE1BQy9Ca0YsRUFBMkIsRUFBUSxNQUV2Q3hGLEVBQU9DLFFBQVVnRSxFQUFjLFNBQVV3QixFQUFRM0UsRUFBS25CLEdBQ3BELE9BQU9XLEVBQXFCTSxFQUFFNkUsRUFBUTNFLEVBQUswRSxFQUF5QixFQUFHN0YsS0FDckUsU0FBVThGLEVBQVEzRSxFQUFLbkIsR0FFekIsT0FEQThGLEVBQU8zRSxHQUFPbkIsRUFDUDhGLEksU0NSVHpGLEVBQU9DLFFBQVUsU0FBVXlGLEVBQVEvRixHQUNqQyxNQUFPLENBQ0xnRixhQUF1QixFQUFUZSxHQUNkN0UsZUFBeUIsRUFBVDZFLEdBQ2hCQyxXQUFxQixFQUFURCxHQUNaL0YsTUFBT0EsSyxlQ0xYLElBQUk0RCxFQUFRLEVBQVEsTUFHcEJ2RCxFQUFPQyxTQUFXc0QsR0FBTSxXQUN0QixPQUE4RSxHQUF2RWEsT0FBT0QsZUFBZSxHQUFJLEVBQUcsQ0FBRVMsSUFBSyxXQUFjLE9BQU8sS0FBUSxPLGNDSjFFLElBQUlnQixFQUFTLEVBQVEsTUFDakI3RSxFQUFXLEVBQVEsS0FFbkJyRSxFQUFXa0osRUFBT2xKLFNBRWxCbUosRUFBUzlFLEVBQVNyRSxJQUFhcUUsRUFBU3JFLEVBQVNDLGVBRXJEcUQsRUFBT0MsUUFBVSxTQUFVQyxHQUN6QixPQUFPMkYsRUFBU25KLEVBQVNDLGNBQWN1RCxHQUFNLEssU0NOL0NGLEVBQU9DLFFBQVUsQ0FDZjZGLFlBQWEsRUFDYkMsb0JBQXFCLEVBQ3JCQyxhQUFjLEVBQ2RDLGVBQWdCLEVBQ2hCQyxZQUFhLEVBQ2JDLGNBQWUsRUFDZkMsYUFBYyxFQUNkQyxxQkFBc0IsRUFDdEJDLFNBQVUsRUFDVkMsa0JBQW1CLEVBQ25CQyxlQUFnQixFQUNoQkMsZ0JBQWlCLEVBQ2pCQyxrQkFBbUIsRUFDbkJDLFVBQVcsRUFDWEMsY0FBZSxFQUNmQyxhQUFjLEVBQ2RDLFNBQVUsRUFDVkMsaUJBQWtCLEVBQ2xCQyxPQUFRLEVBQ1JDLFlBQWEsRUFDYkMsY0FBZSxFQUNmQyxjQUFlLEVBQ2ZDLGVBQWdCLEVBQ2hCQyxhQUFjLEVBQ2RDLGNBQWUsRUFDZkMsaUJBQWtCLEVBQ2xCQyxpQkFBa0IsRUFDbEJDLGVBQWdCLEVBQ2hCQyxpQkFBa0IsRUFDbEJDLGNBQWUsRUFDZkMsVUFBVyxJLGVDakNiLElBQUlDLEVBQWEsRUFBUSxNQUV6QjdILEVBQU9DLFFBQVU0SCxFQUFXLFlBQWEsY0FBZ0IsSSxlQ0Z6RCxJQU1JQyxFQUFPQyxFQU5QbkMsRUFBUyxFQUFRLE1BQ2pCb0MsRUFBWSxFQUFRLE1BRXBCQyxFQUFVckMsRUFBT3FDLFFBQ2pCQyxFQUFXRCxHQUFXQSxFQUFRQyxTQUM5QkMsRUFBS0QsR0FBWUEsRUFBU0MsR0FHMUJBLEVBRUZKLEdBREFELEVBQVFLLEVBQUdDLE1BQU0sTUFDRCxHQUFLTixFQUFNLEdBQ2xCRSxNQUNURixFQUFRRSxFQUFVRixNQUFNLGlCQUNWQSxFQUFNLElBQU0sTUFDeEJBLEVBQVFFLEVBQVVGLE1BQU0sb0JBQ2JDLEVBQVVELEVBQU0sSUFJL0I5SCxFQUFPQyxRQUFVOEgsSUFBWUEsRyxRQ2xCN0IvSCxFQUFPQyxRQUFVLENBQ2YsY0FDQSxpQkFDQSxnQkFDQSx1QkFDQSxpQkFDQSxXQUNBLFksZUNSRixJQUFJMkYsRUFBUyxFQUFRLE1BQ2pCTixFQUEyQixVQUMzQitDLEVBQThCLEVBQVEsTUFDdENDLEVBQVcsRUFBUSxNQUNuQkMsRUFBWSxFQUFRLE1BQ3BCQyxFQUE0QixFQUFRLE1BQ3BDQyxFQUFXLEVBQVEsTUFnQnZCekksRUFBT0MsUUFBVSxTQUFVc0UsRUFBU2EsR0FDbEMsSUFHWXRGLEVBQVFnQixFQUFLNEgsRUFBZ0JDLEVBQWdCQyxFQUhyREMsRUFBU3RFLEVBQVF6RSxPQUNqQmdKLEVBQVN2RSxFQUFRcUIsT0FDakJtRCxFQUFTeEUsRUFBUXlFLEtBU3JCLEdBTkVsSixFQURFZ0osRUFDT2xELEVBQ0FtRCxFQUNBbkQsRUFBT2lELElBQVdOLEVBQVVNLEVBQVEsS0FFbkNqRCxFQUFPaUQsSUFBVyxJQUFJbkksVUFFdEIsSUFBS0ksS0FBT3NFLEVBQVEsQ0FROUIsR0FQQXVELEVBQWlCdkQsRUFBT3RFLEdBR3RCNEgsRUFGRW5FLEVBQVEwRSxhQUNWTCxFQUFhdEQsRUFBeUJ4RixFQUFRZ0IsS0FDZjhILEVBQVdqSixNQUNwQkcsRUFBT2dCLElBQ3RCMkgsRUFBU0ssRUFBU2hJLEVBQU0rSCxHQUFVRSxFQUFTLElBQU0sS0FBT2pJLEVBQUt5RCxFQUFRMkUsY0FFNUN2SSxJQUFuQitILEVBQThCLENBQzNDLFVBQVdDLFVBQTBCRCxFQUFnQixTQUNyREYsRUFBMEJHLEVBQWdCRCxJQUd4Q25FLEVBQVE0RSxNQUFTVCxHQUFrQkEsRUFBZVMsT0FDcERkLEVBQTRCTSxFQUFnQixRQUFRLEdBR3RETCxFQUFTeEksRUFBUWdCLEVBQUs2SCxFQUFnQnBFLE0sU0NuRDFDdkUsRUFBT0MsUUFBVSxTQUFVbUosR0FDekIsSUFDRSxRQUFTQSxJQUNULE1BQU9wSyxHQUNQLE9BQU8sSyxlQ0pYLElBQUlxSyxFQUFZLEVBQVEsTUFHeEJySixFQUFPQyxRQUFVLFNBQVVxSixFQUFJMUcsRUFBTXRHLEdBRW5DLEdBREErTSxFQUFVQyxRQUNHM0ksSUFBVGlDLEVBQW9CLE9BQU8wRyxFQUMvQixPQUFRaE4sR0FDTixLQUFLLEVBQUcsT0FBTyxXQUNiLE9BQU9nTixFQUFHckcsS0FBS0wsSUFFakIsS0FBSyxFQUFHLE9BQU8sU0FBVTJHLEdBQ3ZCLE9BQU9ELEVBQUdyRyxLQUFLTCxFQUFNMkcsSUFFdkIsS0FBSyxFQUFHLE9BQU8sU0FBVUEsRUFBR0MsR0FDMUIsT0FBT0YsRUFBR3JHLEtBQUtMLEVBQU0yRyxFQUFHQyxJQUUxQixLQUFLLEVBQUcsT0FBTyxTQUFVRCxFQUFHQyxFQUFHQyxHQUM3QixPQUFPSCxFQUFHckcsS0FBS0wsRUFBTTJHLEVBQUdDLEVBQUdDLElBRy9CLE9BQU8sV0FDTCxPQUFPSCxFQUFHSSxNQUFNOUcsRUFBTXRCLGMsNEJDcEIxQixJQUFJK0gsRUFBWSxFQUFRLE1BQ3BCdEksRUFBVyxFQUFRLEtBRW5Ca0UsRUFBUSxHQUFHQSxNQUNYMEUsRUFBWSxHQUVaQyxFQUFZLFNBQVU3RSxFQUFHOEUsRUFBWUMsR0FDdkMsS0FBTUQsS0FBY0YsR0FBWSxDQUM5QixJQUFLLElBQUlJLEVBQU8sR0FBSXhFLEVBQUksRUFBR0EsRUFBSXNFLEVBQVl0RSxJQUFLd0UsRUFBS3hFLEdBQUssS0FBT0EsRUFBSSxJQUVyRW9FLEVBQVVFLEdBQWNHLFNBQVMsTUFBTyxnQkFBa0JELEVBQUtFLEtBQUssS0FBTyxLQUMzRSxPQUFPTixFQUFVRSxHQUFZOUUsRUFBRytFLElBS3BDOUosRUFBT0MsUUFBVStKLFNBQVM3TCxNQUFRLFNBQWN5RSxHQUM5QyxJQUFJMEcsRUFBS0QsRUFBVTFOLE1BQ2Z1TyxFQUFXakYsRUFBTWhDLEtBQUszQixVQUFXLEdBQ2pDMEIsRUFBZ0IsV0FDbEIsSUFBSThHLEVBQU9JLEVBQVNDLE9BQU9sRixFQUFNaEMsS0FBSzNCLFlBQ3RDLE9BQU8zRixnQkFBZ0JxSCxFQUFnQjRHLEVBQVVOLEVBQUlRLEVBQUt4TixPQUFRd04sR0FBUVIsRUFBR0ksTUFBTTlHLEVBQU1rSCxJQUczRixPQURJL0ksRUFBU3VJLEVBQUc1SSxhQUFZc0MsRUFBY3RDLFVBQVk0SSxFQUFHNUksV0FDbERzQyxJLGVDekJULElBQUlvSCxFQUFPLEVBQVEsS0FDZnhFLEVBQVMsRUFBUSxNQUVqQnlELEVBQVksU0FBVWdCLEdBQ3hCLE1BQTBCLG1CQUFaQSxFQUF5QkEsT0FBVzFKLEdBR3BEWCxFQUFPQyxRQUFVLFNBQVVxSyxFQUFXdEcsR0FDcEMsT0FBTzFDLFVBQVVoRixPQUFTLEVBQUkrTSxFQUFVZSxFQUFLRSxLQUFlakIsRUFBVXpELEVBQU8wRSxJQUN6RUYsRUFBS0UsSUFBY0YsRUFBS0UsR0FBV3RHLElBQVc0QixFQUFPMEUsSUFBYzFFLEVBQU8wRSxHQUFXdEcsSyxlQ1QzRixJQUFJdUcsRUFBUSxTQUFVckssR0FDcEIsT0FBT0EsR0FBTUEsRUFBR3JFLE1BQVFBLE1BQVFxRSxHQUlsQ0YsRUFBT0MsUUFFTHNLLEVBQTJCLGlCQUFkQyxZQUEwQkEsYUFDdkNELEVBQXVCLGlCQUFWRSxRQUFzQkEsU0FDbkNGLEVBQXFCLGlCQUFSeEgsTUFBb0JBLE9BQ2pDd0gsRUFBdUIsaUJBQVYsRUFBQUcsR0FBc0IsRUFBQUEsSUFFbkMsV0FBZSxPQUFPL08sS0FBdEIsSUFBb0NxTyxTQUFTLGNBQVRBLEksU0NadEMsSUFBSVcsRUFBaUIsR0FBR0EsZUFFeEIzSyxFQUFPQyxRQUFVLFNBQVVDLEVBQUlZLEdBQzdCLE9BQU82SixFQUFlMUgsS0FBSy9DLEVBQUlZLEssU0NIakNkLEVBQU9DLFFBQVUsSSxjQ0FqQixJQUFJNEgsRUFBYSxFQUFRLE1BRXpCN0gsRUFBT0MsUUFBVTRILEVBQVcsV0FBWSxvQixlQ0Z4QyxJQUFJNUQsRUFBYyxFQUFRLE1BQ3RCVixFQUFRLEVBQVEsTUFDaEI1RyxFQUFnQixFQUFRLEtBRzVCcUQsRUFBT0MsU0FBV2dFLElBQWdCVixHQUFNLFdBQ3RDLE9BRVEsR0FGRGEsT0FBT0QsZUFBZXhILEVBQWMsT0FBUSxJQUFLLENBQ3REaUksSUFBSyxXQUFjLE9BQU8sS0FDekIyRSxNLGVDUkwsSUFBSWhHLEVBQVEsRUFBUSxNQUNoQnFILEVBQVUsRUFBUSxNQUVsQnhDLEVBQVEsR0FBR0EsTUFHZnBJLEVBQU9DLFFBQVVzRCxHQUFNLFdBR3JCLE9BQVFhLE9BQU8sS0FBS3lHLHFCQUFxQixNQUN0QyxTQUFVM0ssR0FDYixNQUFzQixVQUFmMEssRUFBUTFLLEdBQWtCa0ksRUFBTW5GLEtBQUsvQyxFQUFJLElBQU1rRSxPQUFPbEUsSUFDM0RrRSxRLGVDWkosSUFBSTBHLEVBQVEsRUFBUSxNQUVoQkMsRUFBbUJmLFNBQVNoRixTQUdFLG1CQUF2QjhGLEVBQU1FLGdCQUNmRixFQUFNRSxjQUFnQixTQUFVOUssR0FDOUIsT0FBTzZLLEVBQWlCOUgsS0FBSy9DLEtBSWpDRixFQUFPQyxRQUFVNkssRUFBTUUsZSxlQ1h2QixJQVVJQyxFQUFLckcsRUFBS1YsRUFWVmdILEVBQWtCLEVBQVEsTUFDMUJ0RixFQUFTLEVBQVEsTUFDakI3RSxFQUFXLEVBQVEsS0FDbkJzSCxFQUE4QixFQUFRLE1BQ3RDOEMsRUFBWSxFQUFRLE1BQ3BCQyxFQUFTLEVBQVEsTUFDakJDLEVBQVksRUFBUSxNQUNwQkMsRUFBYSxFQUFRLE1BRXJCQyxFQUFVM0YsRUFBTzJGLFFBZ0JyQixHQUFJTCxFQUFpQixDQUNuQixJQUFJSixFQUFRTSxFQUFPSSxRQUFVSixFQUFPSSxNQUFRLElBQUlELEdBQzVDRSxFQUFRWCxFQUFNbEcsSUFDZDhHLEVBQVFaLEVBQU01RyxJQUNkeUgsRUFBUWIsRUFBTUcsSUFDbEJBLEVBQU0sU0FBVS9LLEVBQUkwTCxHQUdsQixPQUZBQSxFQUFTQyxPQUFTM0wsRUFDbEJ5TCxFQUFNMUksS0FBSzZILEVBQU81SyxFQUFJMEwsR0FDZkEsR0FFVGhILEVBQU0sU0FBVTFFLEdBQ2QsT0FBT3VMLEVBQU14SSxLQUFLNkgsRUFBTzVLLElBQU8sSUFFbENnRSxFQUFNLFNBQVVoRSxHQUNkLE9BQU93TCxFQUFNekksS0FBSzZILEVBQU81SyxRQUV0QixDQUNMLElBQUk0TCxFQUFRVCxFQUFVLFNBQ3RCQyxFQUFXUSxJQUFTLEVBQ3BCYixFQUFNLFNBQVUvSyxFQUFJMEwsR0FHbEIsT0FGQUEsRUFBU0MsT0FBUzNMLEVBQ2xCbUksRUFBNEJuSSxFQUFJNEwsRUFBT0YsR0FDaENBLEdBRVRoSCxFQUFNLFNBQVUxRSxHQUNkLE9BQU9pTCxFQUFVakwsRUFBSTRMLEdBQVM1TCxFQUFHNEwsR0FBUyxJQUU1QzVILEVBQU0sU0FBVWhFLEdBQ2QsT0FBT2lMLEVBQVVqTCxFQUFJNEwsSUFJekI5TCxFQUFPQyxRQUFVLENBQ2ZnTCxJQUFLQSxFQUNMckcsSUFBS0EsRUFDTFYsSUFBS0EsRUFDTDZILFFBakRZLFNBQVU3TCxHQUN0QixPQUFPZ0UsRUFBSWhFLEdBQU0wRSxFQUFJMUUsR0FBTStLLEVBQUkvSyxFQUFJLEtBaURuQzhMLFVBOUNjLFNBQVU1SixHQUN4QixPQUFPLFNBQVVsQyxHQUNmLElBQUlzTCxFQUNKLElBQUt6SyxFQUFTYixLQUFRc0wsRUFBUTVHLEVBQUkxRSxJQUFLK0wsT0FBUzdKLEVBQzlDLE1BQU1qQyxVQUFVLDBCQUE0QmlDLEVBQU8sYUFDbkQsT0FBT29KLE0sZUNyQmIsSUFBSVosRUFBVSxFQUFRLE1BSXRCNUssRUFBT0MsUUFBVVEsTUFBTW9FLFNBQVcsU0FBaUJxSCxHQUNqRCxNQUF1QixTQUFoQnRCLEVBQVFzQixLLGVDTGpCLElBQUkzSSxFQUFRLEVBQVEsTUFFaEI0SSxFQUFjLGtCQUVkMUQsRUFBVyxTQUFVMkQsRUFBU0MsR0FDaEMsSUFBSTFNLEVBQVEyTSxFQUFLQyxFQUFVSCxJQUMzQixPQUFPek0sR0FBUzZNLEdBQ1o3TSxHQUFTOE0sSUFDVyxtQkFBYkosRUFBMEI5SSxFQUFNOEksS0FDckNBLElBR0pFLEVBQVk5RCxFQUFTOEQsVUFBWSxTQUFVRyxHQUM3QyxPQUFPL04sT0FBTytOLEdBQVFDLFFBQVFSLEVBQWEsS0FBS3pOLGVBRzlDNE4sRUFBTzdELEVBQVM2RCxLQUFPLEdBQ3ZCRyxFQUFTaEUsRUFBU2dFLE9BQVMsSUFDM0JELEVBQVcvRCxFQUFTK0QsU0FBVyxJQUVuQ3hNLEVBQU9DLFFBQVV3SSxHLFFDcEJqQnpJLEVBQU9DLFFBQVUsU0FBVUMsR0FDekIsTUFBcUIsaUJBQVBBLEVBQXlCLE9BQVBBLEVBQTRCLG1CQUFQQSxJLFNDRHZERixFQUFPQyxTQUFVLEcsY0NBakIsSUFBSXNELEVBQVEsRUFBUSxNQUVwQnZELEVBQU9DLFVBQVltRSxPQUFPd0ksd0JBQTBCckosR0FBTSxXQUd4RCxPQUFRNUUsT0FBT2tPLGMsZUNMakIsSUFBSWpILEVBQVMsRUFBUSxNQUNqQm9GLEVBQWdCLEVBQVEsTUFFeEJPLEVBQVUzRixFQUFPMkYsUUFFckJ2TCxFQUFPQyxRQUE2QixtQkFBWnNMLEdBQTBCLGNBQWN1QixLQUFLOUIsRUFBY08sSyxhQ0xuRixJQW1ESXdCLEVBbkRBQyxFQUFXLEVBQVEsTUFDbkJDLEVBQW1CLEVBQVEsTUFDM0JDLEVBQWMsRUFBUSxLQUN0QjVCLEVBQWEsRUFBUSxNQUNyQjZCLEVBQU8sRUFBUSxLQUNmQyxFQUF3QixFQUFRLEtBT2hDQyxFQU5ZLEVBQVEsS0FNVGhDLENBQVUsWUFFckJpQyxFQUFtQixhQUVuQkMsRUFBWSxTQUFVQyxHQUN4QixNQUFPQyxXQUFtQkQsRUFBbkJDLGNBbUNMQyxFQUFrQixXQUNwQixJQUVFWCxFQUFrQnJRLFNBQVNpUixRQUFVLElBQUlDLGNBQWMsWUFDdkQsTUFBTzVPLElBMUJvQixJQUl6QjZPLEVBRkFDLEVBeUJKSixFQUFrQlgsRUFwQ1ksU0FBVUEsR0FDeENBLEVBQWdCZ0IsTUFBTVIsRUFBVSxLQUNoQ1IsRUFBZ0JpQixRQUNoQixJQUFJQyxFQUFPbEIsRUFBZ0JtQixhQUFhOUosT0FFeEMsT0FEQTJJLEVBQWtCLEtBQ1hrQixFQStCNkJFLENBQTBCcEIsS0F6QjFEZSxFQUFTVixFQUFzQixXQUc1QmdCLE1BQU1DLFFBQVUsT0FDdkJsQixFQUFLOVAsWUFBWXlRLEdBRWpCQSxFQUFPUSxJQUFNM1AsT0FMSixnQkFNVGtQLEVBQWlCQyxFQUFPUyxjQUFjN1IsVUFDdkI4UixPQUNmWCxFQUFlRSxNQUFNUixFQUFVLHNCQUMvQk0sRUFBZUcsUUFDUkgsRUFBZVksR0FnQnRCLElBREEsSUFBSW5TLEVBQVM0USxFQUFZNVEsT0FDbEJBLFlBQWlCb1IsRUFBeUIsVUFBRVIsRUFBWTVRLElBQy9ELE9BQU9vUixLQUdUcEMsRUFBVytCLElBQVksRUFJdkJyTixFQUFPQyxRQUFVbUUsT0FBTy9ELFFBQVUsU0FBZ0J5QixFQUFHNE0sR0FDbkQsSUFBSTVMLEVBUUosT0FQVSxPQUFOaEIsR0FDRndMLEVBQTBCLFVBQUlOLEVBQVNsTCxHQUN2Q2dCLEVBQVMsSUFBSXdLLEVBQ2JBLEVBQTBCLFVBQUksS0FFOUJ4SyxFQUFPdUssR0FBWXZMLEdBQ2RnQixFQUFTNEssU0FDTS9NLElBQWYrTixFQUEyQjVMLEVBQVNtSyxFQUFpQm5LLEVBQVE0TCxLLGVDNUV0RSxJQUFJekssRUFBYyxFQUFRLE1BQ3RCM0QsRUFBdUIsRUFBUSxNQUMvQjBNLEVBQVcsRUFBUSxNQUNuQjJCLEVBQWEsRUFBUSxNQUl6QjNPLEVBQU9DLFFBQVVnRSxFQUFjRyxPQUFPNkksaUJBQW1CLFNBQTBCbkwsRUFBRzRNLEdBQ3BGMUIsRUFBU2xMLEdBS1QsSUFKQSxJQUdJaEIsRUFIQXVFLEVBQU9zSixFQUFXRCxHQUNsQnBTLEVBQVMrSSxFQUFLL0ksT0FDZHlGLEVBQVEsRUFFTHpGLEVBQVN5RixHQUFPekIsRUFBcUJNLEVBQUVrQixFQUFHaEIsRUFBTXVFLEVBQUt0RCxLQUFVMk0sRUFBVzVOLElBQ2pGLE9BQU9nQixJLGVDZFQsSUFBSW1DLEVBQWMsRUFBUSxNQUN0QjJLLEVBQWlCLEVBQVEsTUFDekI1QixFQUFXLEVBQVEsTUFDbkI2QixFQUFjLEVBQVEsTUFFdEJDLEVBQXVCMUssT0FBT0QsZUFJbENsRSxFQUFRVyxFQUFJcUQsRUFBYzZLLEVBQXVCLFNBQXdCaE4sRUFBR2lOLEVBQUdDLEdBSTdFLEdBSEFoQyxFQUFTbEwsR0FDVGlOLEVBQUlGLEVBQVlFLEdBQUcsR0FDbkIvQixFQUFTZ0MsR0FDTEosRUFBZ0IsSUFDbEIsT0FBT0UsRUFBcUJoTixFQUFHaU4sRUFBR0MsR0FDbEMsTUFBT2hRLElBQ1QsR0FBSSxRQUFTZ1EsR0FBYyxRQUFTQSxFQUFZLE1BQU03TyxVQUFVLDJCQUVoRSxNQURJLFVBQVc2TyxJQUFZbE4sRUFBRWlOLEdBQUtDLEVBQVdyUCxPQUN0Q21DLEksZUNsQlQsSUFBSW1DLEVBQWMsRUFBUSxNQUN0QmdMLEVBQTZCLEVBQVEsTUFDckN6SixFQUEyQixFQUFRLE1BQ25DakUsRUFBa0IsRUFBUSxNQUMxQnNOLEVBQWMsRUFBUSxNQUN0QjNLLEVBQU0sRUFBUSxNQUNkMEssRUFBaUIsRUFBUSxNQUV6Qk0sRUFBaUM5SyxPQUFPa0IseUJBSTVDckYsRUFBUVcsRUFBSXFELEVBQWNpTCxFQUFpQyxTQUFrQ3BOLEVBQUdpTixHQUc5RixHQUZBak4sRUFBSVAsRUFBZ0JPLEdBQ3BCaU4sRUFBSUYsRUFBWUUsR0FBRyxHQUNmSCxFQUFnQixJQUNsQixPQUFPTSxFQUErQnBOLEVBQUdpTixHQUN6QyxNQUFPL1AsSUFDVCxHQUFJa0YsRUFBSXBDLEVBQUdpTixHQUFJLE9BQU92SixHQUEwQnlKLEVBQTJCck8sRUFBRXFDLEtBQUtuQixFQUFHaU4sR0FBSWpOLEVBQUVpTixNLGVDbEI3RixJQUFJSSxFQUFxQixFQUFRLE1BRzdCN0QsRUFGYyxFQUFRLEtBRUduQixPQUFPLFNBQVUsYUFJOUNsSyxFQUFRVyxFQUFJd0QsT0FBT2dMLHFCQUF1QixTQUE2QnROLEdBQ3JFLE9BQU9xTixFQUFtQnJOLEVBQUd3SixLLGFDUi9CckwsRUFBUVcsRUFBSXdELE9BQU93SSx1QixlQ0FuQixJQUFJMUksRUFBTSxFQUFRLE1BQ2QzQyxFQUFrQixFQUFRLE1BQzFCM0MsRUFBVSxnQkFDVjBNLEVBQWEsRUFBUSxNQUV6QnRMLEVBQU9DLFFBQVUsU0FBVXdGLEVBQVE0SixHQUNqQyxJQUdJdk8sRUFIQWdCLEVBQUlQLEVBQWdCa0UsR0FDcEJGLEVBQUksRUFDSnpDLEVBQVMsR0FFYixJQUFLaEMsS0FBT2dCLEdBQUlvQyxFQUFJb0gsRUFBWXhLLElBQVFvRCxFQUFJcEMsRUFBR2hCLElBQVFnQyxFQUFPOUUsS0FBSzhDLEdBRW5FLEtBQU91TyxFQUFNL1MsT0FBU2lKLEdBQU9yQixFQUFJcEMsRUFBR2hCLEVBQU11TyxFQUFNOUosU0FDN0MzRyxFQUFRa0UsRUFBUWhDLElBQVFnQyxFQUFPOUUsS0FBSzhDLElBRXZDLE9BQU9nQyxJLGVDZlQsSUFBSXFNLEVBQXFCLEVBQVEsTUFDN0JqQyxFQUFjLEVBQVEsS0FJMUJsTixFQUFPQyxRQUFVbUUsT0FBT2lCLE1BQVEsU0FBY3ZELEdBQzVDLE9BQU9xTixFQUFtQnJOLEVBQUdvTCxLLDBCQ0wvQixJQUFJb0MsRUFBNkIsR0FBR3pFLHFCQUNoQ3ZGLEVBQTJCbEIsT0FBT2tCLHlCQUdsQ2lLLEVBQWNqSyxJQUE2QmdLLEVBQTJCck0sS0FBSyxDQUFFdU0sRUFBRyxHQUFLLEdBSXpGdlAsRUFBUVcsRUFBSTJPLEVBQWMsU0FBOEJFLEdBQ3RELElBQUk3RyxFQUFhdEQsRUFBeUIzSixLQUFNOFQsR0FDaEQsUUFBUzdHLEdBQWNBLEVBQVdqRSxZQUNoQzJLLEcsZUNaSixJQUFJekgsRUFBYSxFQUFRLE1BQ3JCNkgsRUFBNEIsRUFBUSxNQUNwQ0MsRUFBOEIsRUFBUSxNQUN0QzNDLEVBQVcsRUFBUSxNQUd2QmhOLEVBQU9DLFFBQVU0SCxFQUFXLFVBQVcsWUFBYyxTQUFpQjNILEdBQ3BFLElBQUltRixFQUFPcUssRUFBMEI5TyxFQUFFb00sRUFBUzlNLElBQzVDME0sRUFBd0IrQyxFQUE0Qi9PLEVBQ3hELE9BQU9nTSxFQUF3QnZILEVBQUs4RSxPQUFPeUMsRUFBc0IxTSxJQUFPbUYsSSxjQ1QxRSxJQUFJTyxFQUFTLEVBQVEsTUFFckI1RixFQUFPQyxRQUFVMkYsRyxlQ0ZqQixJQUFJQSxFQUFTLEVBQVEsTUFDakJ5QyxFQUE4QixFQUFRLE1BQ3RDbkUsRUFBTSxFQUFRLE1BQ2RxRSxFQUFZLEVBQVEsTUFDcEJ5QyxFQUFnQixFQUFRLE1BQ3hCNEUsRUFBc0IsRUFBUSxNQUU5QkMsRUFBbUJELEVBQW9CaEwsSUFDdkNrTCxFQUF1QkYsRUFBb0I3RCxRQUMzQ2dFLEVBQVdwUixPQUFPQSxRQUFReUosTUFBTSxXQUVuQ3BJLEVBQU9DLFFBQVUsU0FBVTZCLEVBQUdoQixFQUFLbkIsRUFBTzRFLEdBQ3pDLElBR0lpSCxFQUhBd0UsSUFBU3pMLEtBQVlBLEVBQVF5TCxPQUM3QkMsSUFBUzFMLEtBQVlBLEVBQVFJLFdBQzdCc0UsSUFBYzFFLEtBQVlBLEVBQVEwRSxZQUVsQixtQkFBVHRKLElBQ1MsaUJBQVBtQixHQUFvQm9ELEVBQUl2RSxFQUFPLFNBQ3hDMEksRUFBNEIxSSxFQUFPLE9BQVFtQixJQUU3QzBLLEVBQVFzRSxFQUFxQm5RLElBQ2xCeUYsU0FDVG9HLEVBQU1wRyxPQUFTMkssRUFBUzlGLEtBQW1CLGlCQUFQbkosRUFBa0JBLEVBQU0sTUFHNURnQixJQUFNOEQsR0FJRW9LLEdBRUEvRyxHQUFlbkgsRUFBRWhCLEtBQzNCbVAsR0FBUyxVQUZGbk8sRUFBRWhCLEdBSVBtUCxFQUFRbk8sRUFBRWhCLEdBQU9uQixFQUNoQjBJLEVBQTRCdkcsRUFBR2hCLEVBQUtuQixJQVRuQ3NRLEVBQVFuTyxFQUFFaEIsR0FBT25CLEVBQ2hCNEksRUFBVXpILEVBQUtuQixLQVVyQnFLLFNBQVN0SixVQUFXLFlBQVksV0FDakMsTUFBc0IsbUJBQVIvRSxNQUFzQmtVLEVBQWlCbFUsTUFBTXlKLFFBQVU0RixFQUFjclAsVSxTQ3BDckZxRSxFQUFPQyxRQUFVLFNBQVVDLEdBQ3pCLEdBQVVTLE1BQU5ULEVBQWlCLE1BQU1DLFVBQVUsd0JBQTBCRCxHQUMvRCxPQUFPQSxJLGVDSlQsSUFBSTBGLEVBQVMsRUFBUSxNQUNqQnlDLEVBQThCLEVBQVEsTUFFMUNySSxFQUFPQyxRQUFVLFNBQVVhLEVBQUtuQixHQUM5QixJQUNFMEksRUFBNEJ6QyxFQUFROUUsRUFBS25CLEdBQ3pDLE1BQU9YLEdBQ1A0RyxFQUFPOUUsR0FBT25CLEVBQ2QsT0FBT0EsSSxlQ1JYLElBQUl5TCxFQUFTLEVBQVEsTUFDakI4RSxFQUFNLEVBQVEsTUFFZDdLLEVBQU8rRixFQUFPLFFBRWxCcEwsRUFBT0MsUUFBVSxTQUFVYSxHQUN6QixPQUFPdUUsRUFBS3ZFLEtBQVN1RSxFQUFLdkUsR0FBT29QLEVBQUlwUCxNLGVDTnZDLElBQUk4RSxFQUFTLEVBQVEsTUFDakIyQyxFQUFZLEVBQVEsTUFFcEI0SCxFQUFTLHFCQUNUckYsRUFBUWxGLEVBQU91SyxJQUFXNUgsRUFBVTRILEVBQVEsSUFFaERuUSxFQUFPQyxRQUFVNkssRyxlQ05qQixJQUFJc0YsRUFBVSxFQUFRLE1BQ2xCdEYsRUFBUSxFQUFRLE9BRW5COUssRUFBT0MsUUFBVSxTQUFVYSxFQUFLbkIsR0FDL0IsT0FBT21MLEVBQU1oSyxLQUFTZ0ssRUFBTWhLLFFBQWlCSCxJQUFWaEIsRUFBc0JBLEVBQVEsTUFDaEUsV0FBWSxJQUFJM0IsS0FBSyxDQUN0QitKLFFBQVMsUUFDVHNJLEtBQU1ELEVBQVUsT0FBUyxTQUN6QkUsVUFBVywwQyxlQ1JiLElBQUkvTSxFQUFRLEVBQVEsTUFDaEJnTixFQUFjLEVBQVEsTUFNMUJ2USxFQUFPQyxRQUFVLFNBQVV5RCxHQUN6QixPQUFPSCxHQUFNLFdBQ1gsUUFBU2dOLEVBQVk3TSxNQU5mLGFBTXFDQSxNQUF5QjZNLEVBQVk3TSxHQUFhOE0sT0FBUzlNLE8sZUNUMUcsSUFBSStNLEVBQXlCLEVBQVEsTUFHakNDLEVBQWEsSUFGQyxFQUFRLE1BRVcsSUFDakNDLEVBQVFDLE9BQU8sSUFBTUYsRUFBYUEsRUFBYSxLQUMvQ0csRUFBUUQsT0FBT0YsRUFBYUEsRUFBYSxNQUd6Q2hQLEVBQWUsU0FBVVUsR0FDM0IsT0FBTyxTQUFVUixHQUNmLElBQUk4SyxFQUFTL04sT0FBTzhSLEVBQXVCN08sSUFHM0MsT0FGVyxFQUFQUSxJQUFVc0ssRUFBU0EsRUFBT0MsUUFBUWdFLEVBQU8sS0FDbEMsRUFBUHZPLElBQVVzSyxFQUFTQSxFQUFPQyxRQUFRa0UsRUFBTyxLQUN0Q25FLElBSVgxTSxFQUFPQyxRQUFVLENBR2Y2USxNQUFPcFAsRUFBYSxHQUdwQnFQLElBQUtyUCxFQUFhLEdBR2xCakQsS0FBTWlELEVBQWEsSyxlQzFCckIsSUFBSXNQLEVBQVksRUFBUSxNQUVwQkMsRUFBTXBWLEtBQUtvVixJQUNYQyxFQUFNclYsS0FBS3FWLElBS2ZsUixFQUFPQyxRQUFVLFNBQVU4QixFQUFPekYsR0FDaEMsSUFBSTZVLEVBQVVILEVBQVVqUCxHQUN4QixPQUFPb1AsRUFBVSxFQUFJRixFQUFJRSxFQUFVN1UsRUFBUSxHQUFLNFUsRUFBSUMsRUFBUzdVLEssZUNUL0QsSUFBSTJGLEVBQWdCLEVBQVEsTUFDeEJ3TyxFQUF5QixFQUFRLE1BRXJDelEsRUFBT0MsUUFBVSxTQUFVQyxHQUN6QixPQUFPK0IsRUFBY3dPLEVBQXVCdlEsTSxTQ0w5QyxJQUFJa1IsRUFBT3ZWLEtBQUt1VixLQUNaQyxFQUFReFYsS0FBS3dWLE1BSWpCclIsRUFBT0MsUUFBVSxTQUFVOEQsR0FDekIsT0FBT3VOLE1BQU12TixHQUFZQSxHQUFZLEdBQUtBLEVBQVcsRUFBSXNOLEVBQVFELEdBQU1yTixLLGVDTnpFLElBQUlpTixFQUFZLEVBQVEsTUFFcEJFLEVBQU1yVixLQUFLcVYsSUFJZmxSLEVBQU9DLFFBQVUsU0FBVThELEdBQ3pCLE9BQU9BLEVBQVcsRUFBSW1OLEVBQUlGLEVBQVVqTixHQUFXLGtCQUFvQixJLGVDUHJFLElBQUkwTSxFQUF5QixFQUFRLE1BSXJDelEsRUFBT0MsUUFBVSxTQUFVOEQsR0FDekIsT0FBT0ssT0FBT3FNLEVBQXVCMU0sTSxlQ0x2QyxJQUFJaEQsRUFBVyxFQUFRLEtBTXZCZixFQUFPQyxRQUFVLFNBQVVzUixFQUFPQyxHQUNoQyxJQUFLelEsRUFBU3dRLEdBQVEsT0FBT0EsRUFDN0IsSUFBSWpJLEVBQUltSSxFQUNSLEdBQUlELEdBQW9ELG1CQUF4QmxJLEVBQUtpSSxFQUFNdk0sWUFBNEJqRSxFQUFTMFEsRUFBTW5JLEVBQUdyRyxLQUFLc08sSUFBUyxPQUFPRSxFQUM5RyxHQUFtQyxtQkFBdkJuSSxFQUFLaUksRUFBTUcsV0FBMkIzUSxFQUFTMFEsRUFBTW5JLEVBQUdyRyxLQUFLc08sSUFBUyxPQUFPRSxFQUN6RixJQUFLRCxHQUFvRCxtQkFBeEJsSSxFQUFLaUksRUFBTXZNLFlBQTRCakUsRUFBUzBRLEVBQU1uSSxFQUFHckcsS0FBS3NPLElBQVMsT0FBT0UsRUFDL0csTUFBTXRSLFVBQVUsNkMsU0NabEIsSUFBSXZFLEVBQUssRUFDTCtWLEVBQVU5VixLQUFLQyxTQUVuQmtFLEVBQU9DLFFBQVUsU0FBVWEsR0FDekIsTUFBTyxVQUFZbkMsWUFBZWdDLElBQVJHLEVBQW9CLEdBQUtBLEdBQU8sUUFBVWxGLEVBQUsrVixHQUFTM00sU0FBUyxNLGVDSjdGLElBQUk0TSxFQUFnQixFQUFRLEtBRTVCNVIsRUFBT0MsUUFBVTJSLElBRVgvRSxPQUFPMUQsTUFFa0IsaUJBQW5CMEQsT0FBT2dGLFUsZUNObkIsSUFBSWpNLEVBQVMsRUFBUSxNQUNqQndGLEVBQVMsRUFBUSxNQUNqQmxILEVBQU0sRUFBUSxNQUNkZ00sRUFBTSxFQUFRLE1BQ2QwQixFQUFnQixFQUFRLEtBQ3hCRSxFQUFvQixFQUFRLE1BRTVCQyxFQUF3QjNHLEVBQU8sT0FDL0J5QixFQUFTakgsRUFBT2lILE9BQ2hCbUYsRUFBd0JGLEVBQW9CakYsRUFBU0EsR0FBVUEsRUFBT29GLGVBQWlCL0IsRUFFM0ZsUSxFQUFPQyxRQUFVLFNBQVV1USxHQUl2QixPQUhHdE0sRUFBSTZOLEVBQXVCdkIsS0FDMUJvQixHQUFpQjFOLEVBQUkySSxFQUFRMkQsR0FBT3VCLEVBQXNCdkIsR0FBUTNELEVBQU8yRCxHQUN4RXVCLEVBQXNCdkIsR0FBUXdCLEVBQXNCLFVBQVl4QixJQUM5RHVCLEVBQXNCdkIsSyxTQ2JqQ3hRLEVBQU9DLFFBQVUsaUQsNEJDRGpCLElBQUlpUyxFQUFJLEVBQVEsTUFDWkMsRUFBVSxlQUNWQyxFQUErQixFQUFRLE1BQ3ZDbFIsRUFBMEIsRUFBUSxNQUVsQ21SLEVBQXNCRCxFQUE2QixVQUVuRGhSLEVBQWlCRixFQUF3QixVQUs3Q2dSLEVBQUUsQ0FBRXBTLE9BQVEsUUFBU3dTLE9BQU8sRUFBTXBKLFFBQVNtSixJQUF3QmpSLEdBQWtCLENBQ25GOUMsT0FBUSxTQUFnQitDLEdBQ3RCLE9BQU84USxFQUFReFcsS0FBTTBGLEVBQVlDLFVBQVVoRixPQUFTLEVBQUlnRixVQUFVLFFBQUtYLE8sNEJDZDNFLElBQUl1UixFQUFJLEVBQVEsTUFDWkssRUFBYSxrQkFDYkMsRUFBbUIsRUFBUSxNQUMzQnRSLEVBQTBCLEVBQVEsTUFFbEN1UixFQUFhLFlBQ2JDLEdBQWMsRUFFZHRSLEVBQWlCRixFQUF3QnVSLEdBR3pDQSxJQUFjLElBQUloUyxNQUFNLEdBQWEsV0FBRSxXQUFjaVMsR0FBYyxLQUl2RVIsRUFBRSxDQUFFcFMsT0FBUSxRQUFTd1MsT0FBTyxFQUFNcEosT0FBUXdKLElBQWdCdFIsR0FBa0IsQ0FDMUVsRSxVQUFXLFNBQW1CbUUsR0FDNUIsT0FBT2tSLEVBQVc1VyxLQUFNMEYsRUFBWUMsVUFBVWhGLE9BQVMsRUFBSWdGLFVBQVUsUUFBS1gsTUFLOUU2UixFQUFpQkMsSSw0QkN0QmpCLElBQUlQLEVBQUksRUFBUSxNQUNaM1YsRUFBVSxFQUFRLE1BSXRCMlYsRUFBRSxDQUFFcFMsT0FBUSxRQUFTd1MsT0FBTyxFQUFNcEosT0FBUSxHQUFHM00sU0FBV0EsR0FBVyxDQUNqRUEsUUFBU0EsSyw0QkNOWCxJQUFJMlYsRUFBSSxFQUFRLE1BQ1pTLEVBQVcsZ0JBQ1gxUixFQUFzQixFQUFRLE1BQzlCQyxFQUEwQixFQUFRLE1BRWxDMFIsRUFBZ0IsR0FBR2hVLFFBRW5CaVUsSUFBa0JELEdBQWlCLEVBQUksQ0FBQyxHQUFHaFUsUUFBUSxHQUFJLEdBQUssRUFDNUR1QyxFQUFnQkYsRUFBb0IsV0FDcENHLEVBQWlCRixFQUF3QixVQUFXLENBQUVzRCxXQUFXLEVBQU1nTCxFQUFHLElBSTlFMEMsRUFBRSxDQUFFcFMsT0FBUSxRQUFTd1MsT0FBTyxFQUFNcEosT0FBUTJKLElBQWtCMVIsSUFBa0JDLEdBQWtCLENBQzlGeEMsUUFBUyxTQUFpQmtVLEdBQ3hCLE9BQU9ELEVBRUhELEVBQWNsSixNQUFNL04sS0FBTTJGLFlBQWMsRUFDeENxUixFQUFTaFgsS0FBTW1YLEVBQWV4UixVQUFVaEYsT0FBUyxFQUFJZ0YsVUFBVSxRQUFLWCxPLGVDbkI1RSxJQUFJMkgsRUFBVyxFQUFRLE1BRW5CeUssRUFBZ0JoWCxLQUFLMkUsVUFDckJzUyxFQUFlLGVBRWZDLEVBQXFCRixFQUF1QixTQUM1Q0csRUFBVUgsRUFBY0csUUFJeEIsSUFBSW5YLEtBQUtvWCxLQUFPLElBQU1ILEdBQ3hCMUssRUFBU3lLLEVBUEssWUFPcUIsV0FDakMsSUFBSXBULEVBQVF1VCxFQUFRalEsS0FBS3RILE1BRXpCLE9BQU9nRSxHQUFVQSxFQUFRc1QsRUFBbUJoUSxLQUFLdEgsTUFBUXFYLE0sZUNkckQsRUFBUSxLQUtoQmQsQ0FBRSxDQUFFcFMsT0FBUSxXQUFZd1MsT0FBTyxHQUFRLENBQ3JDblUsS0FMUyxFQUFRLFMsZUNEbkIsSUFBSStULEVBQUksRUFBUSxNQUNaak8sRUFBYyxFQUFRLE1BSzFCaU8sRUFBRSxDQUFFcFMsT0FBUSxTQUFVa0osTUFBTSxFQUFNRSxRQUFTakYsRUFBYWtGLE1BQU9sRixHQUFlLENBQzVFRSxlQUwrQixFQUFRLE1BS0l2RCxLLDRCQ043QyxJQUFJc1IsRUFBSSxFQUFRLE1BQ1prQixFQUFRLGFBS1psQixFQUFFLENBQUVwUyxPQUFRLFNBQVV3UyxPQUFPLEVBQU1wSixPQUpOLEVBQVEsS0FJTW1LLENBQXVCLFNBQVcsQ0FDM0U1VSxLQUFNLFdBQ0osT0FBTzJVLEVBQU16WCxVLGVDVGpCLElBQUlpSyxFQUFTLEVBQVEsTUFDakIwTixFQUFlLEVBQVEsTUFDdkIvVyxFQUFVLEVBQVEsTUFDbEI4TCxFQUE4QixFQUFRLE1BRTFDLElBQUssSUFBSWtMLEtBQW1CRCxFQUFjLENBQ3hDLElBQUlFLEVBQWE1TixFQUFPMk4sR0FDcEJFLEVBQXNCRCxHQUFjQSxFQUFXOVMsVUFFbkQsR0FBSStTLEdBQXVCQSxFQUFvQmxYLFVBQVlBLEVBQVMsSUFDbEU4TCxFQUE0Qm9MLEVBQXFCLFVBQVdsWCxHQUM1RCxNQUFPeUMsR0FDUHlVLEVBQW9CbFgsUUFBVUEsSyw0QkNIbEMsSUFBSW1YLEVBQWUsRUFBUSxNQUV2QkMsRUFBZ0J2UCxPQUFPL0QsT0FBTyxNQUM5QnVULEVBQWlDLG9CQUFibFgsU0FDcEJILEVBQVVrRSxNQUFNQyxVQUFVbkUsUUFrQjlCLFNBQVNzWCxLQTJDVCxTQUFTQyxFQUFVclgsRUFBSXNYLEdBQ3JCLElBQUtBLEVBQUssQ0FDUixJQUFLdFgsRUFBR3VYLEtBQ04sT0FJRkQsRUFBTXRYLEVBQUd1WCxLQUFLNUwsTUFBTSxLQUFLLEdBRzNCLEdBQUs2TCxFQUFhRixLQUlFLElBQWhCdFgsRUFBR3lYLFVBTUZILEdBQVNBLEVBQUluVixRQUFRLFNBQVcsRUFBckMsQ0FLQW5DLEVBQUcwWCxTQUFVLEVBQ2IsSUFBSUMsRUFBUTNYLEVBQUc0WCxZQUNmRCxFQUFNRixVQUFXLEVBQ2pCRSxFQUFNcFgsaUJBQWlCLFFBQVEsV0FDN0JvWCxFQUFNRixVQUFXLEVBQ2pCelgsRUFBRzZYLFdBQVdDLFlBQVk5WCxNQUU1QjJYLEVBQU1wWCxpQkFBaUIsU0FBUyxXQUM5Qm9YLEVBQU1GLFVBQVcsRUFDakJ6WCxFQUFHNlgsV0FBV0MsWUFBWTlYLE1BRTVCMlgsRUFBTUosS0FBTyxHQUFHN0osT0FBTzRKLEVBQUssS0FBSzVKLE9BQU9wTyxLQUFLeVksT0FFekMvWCxFQUFHZ1ksWUFDTGhZLEVBQUc2WCxXQUFXSSxhQUFhTixFQUFPM1gsRUFBR2dZLGFBRXJDaFksRUFBRzZYLFdBQVdqWCxZQUFZK1csSUFpRDlCLFNBQVNPLElBQ1AsSUFBSUMsRUFBV2xZLFNBQVNtWSxpQkFBaUIsUUFDekN0WSxFQUFRMEcsS0FBSzJSLEdBQVUsU0FBVW5ZLElBQ1osSUFBZkEsRUFBRzBYLFNBSVBMLEVBQVVyWCxNQUlkLFNBQVN3WCxFQUFhRixHQUdwQixRQUFLLFlBQVlqSCxLQUFLaUgsR0FPeEIvVCxFQUFPQyxRQUFVLFNBQVU2VSxFQUFVdlEsR0FDbkMsR0FBSXFQLEVBRUYsT0FEQXRXLFFBQVFDLElBQUksOENBQ0xzVyxFQUdULElBaExnQnZLLEVBQ1p5TCxFQStLQUMsRUE5Sk4sU0FBNkJGLEdBQzNCLElBQUl4RyxFQUFNcUYsRUFBY21CLEdBRXhCLElBQUt4RyxFQUFLLENBQ1IsR0FBSTVSLFNBQVN1WSxjQUNYM0csRUFBTTVSLFNBQVN1WSxjQUFjM0csUUFDeEIsQ0FDTCxJQUFJNEcsRUFBVXhZLFNBQVN5WSxxQkFBcUIsVUFDeENDLEVBQWdCRixFQUFRQSxFQUFRNVksT0FBUyxHQUV6QzhZLElBQ0Y5RyxFQUFNOEcsRUFBYzlHLEtBSXhCcUYsRUFBY21CLEdBQVl4RyxFQUc1QixPQUFPLFNBQVUrRyxHQUNmLElBQUsvRyxFQUNILE9BQU8sS0FHVCxJQUFJZ0gsRUFBY2hILEVBQUlsRyxNQUFNLGtCQUN4Qm1OLEVBQVdELEdBQWVBLEVBQVksR0FFMUMsT0FBS0MsR0FJQUYsRUFJRUEsRUFBUWpOLE1BQU0sS0FBS2xGLEtBQUksU0FBVXNTLEdBQ3RDLElBQUlDLEVBQU0sSUFBSTdFLE9BQU8sR0FBR3pHLE9BQU9vTCxFQUFVLFVBQVcsS0FDcEQsT0FBTzdCLEVBQWFwRixFQUFJM0IsUUFBUThJLEVBQUssR0FBR3RMLE9BQU9xTCxFQUFRN0ksUUFBUSxjQUFlNEksR0FBVyxhQVRsRixDQUFDakgsRUFBSTNCLFFBQVEsTUFBTyxVQW1JWitJLENBQW9CWixHQW9CdkMsT0FwTWdCeEwsRUFrTGhCLFdBQ0UsSUFBSWdGLEVBQU0wRyxFQUFhelEsRUFBUWdSLFVBQzNCSSxFQTdEUixTQUFxQnJILEdBQ25CLElBQUtBLEVBQ0gsT0FBTyxFQUdULElBQUlzRyxFQUFXbFksU0FBU21ZLGlCQUFpQixRQUNyQ2UsR0FBUyxFQXFCYixPQXBCQXJaLEVBQVEwRyxLQUFLMlIsR0FBVSxTQUFVblksR0FDL0IsR0FBS0EsRUFBR3VYLEtBQVIsQ0FJQSxJQUFJRCxFQTNCUixTQUFzQkMsRUFBTTFGLEdBQzFCLElBQUl1SCxFQVdKLE9BVEE3QixFQUFPTixFQUFhTSxFQUFNLENBQ3hCOEIsVUFBVSxJQUdaeEgsRUFBSW5MLE1BQUssU0FBVTRRLEdBQ2JDLEVBQUtwVixRQUFRMFAsSUFBUSxJQUN2QnVILEVBQU05QixNQUdIOEIsRUFlS0UsQ0FBYXRaLEVBQUd1WCxLQUFNMUYsR0FFM0IyRixFQUFhRixLQUlDLElBQWZ0WCxFQUFHMFgsU0FJSEosSUFDRkQsRUFBVXJYLEVBQUlzWCxHQUNkNkIsR0FBUyxPQUdOQSxFQWtDVUksQ0FBWTFILEdBRTNCLEdBQUkvSixFQUFRMFIsT0FHVixPQUZBM1ksUUFBUUMsSUFBSSx5REFDWm9YLElBSUVnQixFQUNGclksUUFBUUMsSUFBSSxzQkFBdUIrUSxFQUFJckUsS0FBSyxPQUU1QzNNLFFBQVFDLElBQUksd0JBQ1pvWCxNQUlvQixHQW5NcEJJLEVBQVUsRUFDUCxXQUNMLElBQUloUyxFQUFPcEgsS0FFUG1PLEVBQU94SSxVQUVQNFUsRUFBZSxXQUNqQixPQUFPNU0sRUFBR0ksTUFBTTNHLEVBQU0rRyxJQUd4QnFNLGFBQWFwQixHQUNiQSxFQUFVcUIsV0FBV0YsRUF3TEMsTyxzQkM5TDFCbFcsRUFBT0MsUUFBVSxTQUFVb1csR0FHekIsR0FGQUEsRUFBWUEsRUFBVTVYLE9BRWxCLFVBQVVxTyxLQUFLdUosR0FDakIsT0FBT0EsRUFHVCxJQUFJQyxHQUF3QyxJQUE3QkQsRUFBVXpYLFFBQVEsTUFBZXlYLEVBQVVqTyxNQUFNLE1BQU0sR0FBSyxLQUFPLEdBQzlFbU8sRUFBYUYsRUFBVTFKLFFBQVEsSUFBSWlFLE9BQU8wRixFQUFVLEtBQU0sSUFBSWxPLE1BQU0sS0FDcEVvTyxFQUFPRCxFQUFXLEdBQUc3WCxjQUFjaU8sUUFBUSxNQUFPLElBR3RELE9BRkE0SixFQUFXLEdBQUssR0FFVEQsRUFBV0UsRUFETUQsRUE1QkZFLFFBQU8sU0FBVUMsRUFBYWxaLEdBQ2xELE9BQVFBLEdBQ04sSUFBSyxLQUNIa1osRUFBWUMsTUFDWixNQUVGLElBQUssSUFDSCxNQUVGLFFBQ0VELEVBQVkxWSxLQUFLUixHQUdyQixPQUFPa1osSUFDTixJQUFJek0sS0FBSyxPLDRCQ2RSLElBQUkyTSxFQUFZLEVBQVEsS0FBUixDQUFxSDVXLEVBQU9wRSxHQUFJLENBQUMsUUFBUyxJQUMxSm9FLEVBQU82VyxJQUFJQyxRQUFRRixHQUNuQjVXLEVBQU82VyxJQUFJRSxZQUFPcFcsRUFBV2lXLEtDTC9CSSxFQUEyQixHQUcvQixTQUFTQyxFQUFvQm5DLEdBRTVCLEdBQUdrQyxFQUF5QmxDLEdBQzNCLE9BQU9rQyxFQUF5QmxDLEdBQVU3VSxRQUczQyxJQUFJRCxFQUFTZ1gsRUFBeUJsQyxHQUFZLENBQ2pEbFosR0FBSWtaLEVBRUo3VSxRQUFTLElBSU5pWCxFQUFjLENBQUV0YixHQUFJa1osRUFBVTlVLE9BQVFBLEVBQVFtWCxRQUFTQyxFQUFvQnRDLEdBQVd1QyxRQUFTSixHQU1uRyxPQUxBQSxFQUFvQjFSLEVBQUVoSixTQUFRLFNBQVMrYSxHQUFXQSxFQUFRSixNQUMxRGxYLEVBQVNrWCxFQUFZbFgsT0FDckJrWCxFQUFZQyxRQUFRbFUsS0FBS2pELEVBQU9DLFFBQVNELEVBQVFBLEVBQU9DLFFBQVNpWCxFQUFZRyxTQUd0RXJYLEVBQU9DLFFBSWZnWCxFQUFvQk0sRUFBSUgsRUFHeEJILEVBQW9CeE4sRUFBSXVOLEVBR3hCQyxFQUFvQjFSLEVBQUksR0NoQ3hCMFIsRUFBb0JPLEdBQU1DLEdBRWJBLEVBQVUsSUFBTVIsRUFBb0JTLElBQU0saUJDRnZEVCxFQUFvQlUsU0FBWUYsR0FFeEIsV0NIUlIsRUFBb0JXLEtBQU8sSUFBTSxRQUFVWCxFQUFvQlMsSUFBTSxtQkNBckVULEVBQW9CUyxFQUFJLElBQU0sdUJDQTlCVCxFQUFvQnZNLEVBQUksV0FDdkIsR0FBMEIsaUJBQWZGLFdBQXlCLE9BQU9BLFdBQzNDLElBQ0MsT0FBTzdPLE1BQVEsSUFBSXFPLFNBQVMsY0FBYixHQUNkLE1BQU92SyxHQUNSLEdBQXNCLGlCQUFYZ0wsT0FBcUIsT0FBT0EsUUFMakIsR0NBeEJ3TSxFQUFvQnphLEVBQUksQ0FBQ3FiLEVBQUtDLElBQVMxVCxPQUFPMUQsVUFBVWlLLGVBQWUxSCxLQUFLNFUsRUFBS0MsRzdGQTdFNWMsRUFBYSxHQUNiQyxFQUFvQixPQUV4QjhiLEVBQW9CYyxFQUFJLENBQUNoRSxFQUFLaUUsRUFBTWxYLEVBQUsyVyxLQUN4QyxHQUFHdmMsRUFBVzZZLEdBQVE3WSxFQUFXNlksR0FBSy9WLEtBQUtnYSxPQUEzQyxDQUNBLElBQUlDLEVBQVFDLEVBQ1osUUFBV3ZYLElBQVJHLEVBRUYsSUFEQSxJQUFJb1UsRUFBVXhZLFNBQVN5WSxxQkFBcUIsVUFDcEM1UCxFQUFJLEVBQUdBLEVBQUkyUCxFQUFRNVksT0FBUWlKLElBQUssQ0FDdkMsSUFBSTRTLEVBQUlqRCxFQUFRM1AsR0FDaEIsR0FBRzRTLEVBQUVDLGFBQWEsUUFBVXJFLEdBQU9vRSxFQUFFQyxhQUFhLGlCQUFtQmpkLEVBQW9CMkYsRUFBSyxDQUFFbVgsRUFBU0UsRUFBRyxPQUcxR0YsSUFDSEMsR0FBYSxHQUNiRCxFQUFTdmIsU0FBU0MsY0FBYyxXQUV6QjBiLFFBQVUsUUFDakJKLEVBQU9sRCxRQUFVLElBQ2JrQyxFQUFvQnFCLElBQ3ZCTCxFQUFPTSxhQUFhLFFBQVN0QixFQUFvQnFCLElBRWxETCxFQUFPTSxhQUFhLGVBQWdCcGQsRUFBb0IyRixHQUN4RG1YLEVBQU8zSixJQUFNeUYsR0FFZDdZLEVBQVc2WSxHQUFPLENBQUNpRSxHQUNuQixJQUFJUSxFQUFtQixDQUFDQyxFQUFNQyxLQUU3QlQsRUFBT1UsUUFBVVYsRUFBT1csT0FBUyxLQUNqQ3pDLGFBQWFwQixHQUNiLElBQUk4RCxFQUFVM2QsRUFBVzZZLEdBSXpCLFVBSE83WSxFQUFXNlksR0FDbEJrRSxFQUFPM0QsWUFBYzJELEVBQU8zRCxXQUFXQyxZQUFZMEQsR0FDbkRZLEdBQVdBLEVBQVF0YyxTQUFTK00sR0FBT0EsRUFBR29QLEtBQ25DRCxFQUFNLE9BQU9BLEVBQUtDLElBR2xCM0QsRUFBVXFCLFdBQVdvQyxFQUFpQnJhLEtBQUssVUFBTXdDLEVBQVcsQ0FBRXNMLEtBQU0sVUFBV25NLE9BQVFtWSxJQUFXLE1BQ3RHQSxFQUFPVSxRQUFVSCxFQUFpQnJhLEtBQUssS0FBTThaLEVBQU9VLFNBQ3BEVixFQUFPVyxPQUFTSixFQUFpQnJhLEtBQUssS0FBTThaLEVBQU9XLFFBQ25EVixHQUFjeGIsU0FBU29jLEtBQUt6YixZQUFZNGEsSyxNOEZ4Q3pDLElBSUljLEVBUUFDLEVBR0FDLEVBQ0FDLEVBaEJBQyxFQUFvQixHQUNwQkMsRUFBbUJuQyxFQUFvQnhOLEVBSXZDNFAsRUFBaUIsR0FHakJDLEVBQTJCLEdBQzNCQyxFQUFnQixPQWdMcEIsU0FBU0MsRUFBVUMsR0FDbEJGLEVBQWdCRSxFQUNoQixJQUFLLElBQUlsVSxFQUFJLEVBQUdBLEVBQUkrVCxFQUF5QmhkLE9BQVFpSixJQUNwRCtULEVBQXlCL1QsR0FBR3RDLEtBQUssS0FBTXdXLEdBb0J6QyxTQUFTQyxFQUF3QnBRLEdBQ2hDLEdBQWdDLElBQTVCMFAsRUFBaUIxYyxPQUFjLE9BQU9nTixJQUMxQyxJQUFJcVEsRUFBVVgsRUFFZCxPQURBQSxFQUFtQixHQUNaWSxRQUFRQyxJQUFJRixHQUFTRyxNQUFLLFdBQ2hDLE9BQU9KLEVBQXdCcFEsTUFJakMsU0FBU3lRLEVBQVNDLEdBQ2pCLEdBQXNCLFNBQWxCVCxFQUNILE1BQU0sSUFBSVUsTUFBTSwwQ0FHakIsT0FEQVQsRUFBVSxTQUNIdkMsRUFBb0JpRCxPQUFPSixNQUFLLFNBQVVLLEdBQ2hELElBQUtBLEVBRUosT0FEQVgsRUFBVVksSUFBNEIsUUFBVSxRQUN6QyxLQUdSWixFQUFVLFdBRVYsSUFBSWEsRUFBaUIsR0FJckIsT0FIQXJCLEVBQW1CLEdBQ25CQyxFQUE2QixHQUV0QlcsUUFBUUMsSUFDZHpWLE9BQU9pQixLQUFLNFIsRUFBb0JxRCxNQUFNN0QsUUFBTyxTQUM1QzhELEVBQ0F6WixHQVVBLE9BUkFtVyxFQUFvQnFELEtBQUt4WixHQUN4QnFaLEVBQU8xUSxFQUNQMFEsRUFBT0ssRUFDUEwsRUFBTzVDLEVBQ1BnRCxFQUNBdEIsRUFDQW9CLEdBRU1FLElBRVIsS0FDQ1QsTUFBSyxXQUNOLE9BQU9KLEdBQXdCLFdBQzlCLE9BQUlNLEVBQ0lTLEVBQWNULElBRXJCUixFQUFVLFNBRUhhLFlBT1osU0FBU0ssRUFBU25XLEdBQ2pCLE1BQXNCLFVBQWxCZ1YsRUFDSUssUUFBUWUsVUFBVWIsTUFBSyxXQUM3QixNQUFNLElBQUlHLE1BQU0sOENBR1hRLEVBQWNsVyxHQUd0QixTQUFTa1csRUFBY2xXLEdBQ3RCQSxFQUFVQSxHQUFXLEdBRXJCNlYsSUFFQSxJQUFJUSxFQUFVM0IsRUFBMkIvVixLQUFJLFNBQVVvVSxHQUN0RCxPQUFPQSxFQUFRL1MsTUFFaEIwVSxPQUE2QnRZLEVBRTdCLElBdUJJM0IsRUF2QkE2YixFQUFTRCxFQUNYMVgsS0FBSSxTQUFVc1gsR0FDZCxPQUFPQSxFQUFFeGIsU0FFVFYsT0FBT3dGLFNBRVQsR0FBSStXLEVBQU92ZSxPQUFTLEVBRW5CLE9BREFrZCxFQUFVLFNBQ0hJLFFBQVFlLFVBQVViLE1BQUssV0FDN0IsTUFBTWUsRUFBTyxNQUtmckIsRUFBVSxXQUVWb0IsRUFBUXJlLFNBQVEsU0FBVXVHLEdBQ3JCQSxFQUFPZ1UsU0FBU2hVLEVBQU9nVSxhQUk1QjBDLEVBQVUsU0FHVixJQUFJc0IsRUFBYyxTQUFVQyxHQUN0Qi9iLElBQU9BLEVBQVErYixJQUdqQkMsRUFBa0IsR0FhdEIsT0FaQUosRUFBUXJlLFNBQVEsU0FBVXVHLEdBQ3pCLEdBQUlBLEVBQU80RyxNQUFPLENBQ2pCLElBQUl1UixFQUFVblksRUFBTzRHLE1BQU1vUixHQUMzQixHQUFJRyxFQUNILElBQUssSUFBSTFWLEVBQUksRUFBR0EsRUFBSTBWLEVBQVEzZSxPQUFRaUosSUFDbkN5VixFQUFnQmhkLEtBQUtpZCxFQUFRMVYsUUFPN0J2RyxHQUNId2EsRUFBVSxRQUNISSxRQUFRZSxVQUFVYixNQUFLLFdBQzdCLE1BQU05YSxNQUlKa2EsRUFDSXVCLEVBQWNsVyxHQUFTdVYsTUFBSyxTQUFVL1AsR0FJNUMsT0FIQWlSLEVBQWdCemUsU0FBUSxTQUFVdVksR0FDN0IvSyxFQUFLbkwsUUFBUWtXLEdBQVksR0FBRy9LLEVBQUsvTCxLQUFLOFcsTUFFcEMvSyxNQUlUeVAsRUFBVSxRQUNISSxRQUFRZSxRQUFRSyxJQUd4QixTQUFTWixJQUNSLEdBQUlsQixFQVdILE9BVktELElBQTRCQSxFQUE2QixJQUM5RDdVLE9BQU9pQixLQUFLNFIsRUFBb0JpRSxNQUFNM2UsU0FBUSxTQUFVdUUsR0FDdkRvWSxFQUF5QjNjLFNBQVEsU0FBVXVZLEdBQzFDbUMsRUFBb0JpRSxLQUFLcGEsR0FDeEJnVSxFQUNBbUUsU0FJSEMsT0FBMkJ2WSxHQUNwQixFQWpWVHNXLEVBQW9Ca0UsS0FBT2hDLEVBRTNCbEMsRUFBb0IxUixFQUFFdkgsTUFBSyxTQUFVdUcsR0FDcEMsSUErRDhCdVEsRUFBVXNHLEVBQ3BDdkUsRUFoRUE3VyxFQUFTdUUsRUFBUXZFLE9BQ2pCcVgsRUFXTCxTQUF1QkEsRUFBU3ZDLEdBQy9CLElBQUlzRyxFQUFLaEMsRUFBaUJ0RSxHQUMxQixJQUFLc0csRUFBSSxPQUFPL0QsRUFDaEIsSUFBSS9OLEVBQUssU0FBVStSLEdBQ2xCLEdBQUlELEVBQUd2RSxJQUFJeUUsT0FBUSxDQUNsQixHQUFJbEMsRUFBaUJpQyxHQUFVLENBQzlCLElBQUlFLEVBQVVuQyxFQUFpQmlDLEdBQVNFLFNBQ0wsSUFBL0JBLEVBQVEzYyxRQUFRa1csSUFDbkJ5RyxFQUFRdmQsS0FBSzhXLFFBR2R1RSxFQUFpQixDQUFDdkUsR0FDbEJpRSxFQUFxQnNDLEdBRWdCLElBQWxDRCxFQUFHSSxTQUFTNWMsUUFBUXljLElBQ3ZCRCxFQUFHSSxTQUFTeGQsS0FBS3FkLFFBR2xCL2QsUUFBUW1lLEtBQ1AsNEJBQ0NKLEVBQ0EsMEJBQ0F2RyxHQUVGdUUsRUFBaUIsR0FFbEIsT0FBT2hDLEVBQVFnRSxJQUVaN1YsRUFBMkIsU0FBVWdMLEdBQ3hDLE1BQU8sQ0FDTjNQLGNBQWMsRUFDZDhELFlBQVksRUFDWkMsSUFBSyxXQUNKLE9BQU95UyxFQUFRN0csSUFFaEJ2RixJQUFLLFNBQVV0TCxHQUNkMFgsRUFBUTdHLEdBQVE3USxLQUluQixJQUFLLElBQUk2USxLQUFRNkcsRUFDWmpULE9BQU8xRCxVQUFVaUssZUFBZTFILEtBQUtvVSxFQUFTN0csSUFBa0IsTUFBVEEsR0FDMURwTSxPQUFPRCxlQUFlbUYsRUFBSWtILEVBQU1oTCxFQUF5QmdMLElBTTNELE9BSEFsSCxFQUFHN0osRUFBSSxTQUFVZ1ksR0FDaEIsT0ErR0YsU0FBOEJpRSxHQUM3QixPQUFRbkMsR0FDUCxJQUFLLFFBTUosT0FMQUMsRUFBVSxXQUNWUixFQUFpQmhiLEtBQUswZCxHQUN0QmhDLEdBQXdCLFdBQ3ZCRixFQUFVLFlBRUprQyxFQUNSLElBQUssVUFFSixPQURBMUMsRUFBaUJoYixLQUFLMGQsR0FDZkEsRUFDUixRQUNDLE9BQU9BLEdBNUhEQyxDQUFxQnRFLEVBQVE1WCxFQUFFZ1ksS0FFaENuTyxFQTNET3NTLENBQWNyWCxFQUFROFMsUUFBUzlTLEVBQVEzSSxJQUNyRG9FLEVBQU82VyxLQTZEdUIvQixFQTdES3ZRLEVBQVEzSSxHQTZESHdmLEVBN0RPcGIsRUE4RDNDNlcsRUFBTSxDQUVUZ0Ysc0JBQXVCLEdBQ3ZCQyxzQkFBdUIsR0FDdkJDLGVBQWUsRUFDZkMsZUFBZSxFQUNmQyxrQkFBa0IsRUFDbEJDLGlCQUFrQixHQUNsQkMsTUFBT3BELElBQXVCakUsRUFDOUJzSCxhQUFjLFdBQ2IvQyxFQUFpQitCLEVBQUdHLFFBQVF0VyxRQUM1QjhULEVBQXFCakUsRUFDckJtQyxFQUFvQm5DLElBSXJCd0csUUFBUSxFQUNSdkUsT0FBUSxTQUFVc0YsRUFBS2pnQixHQUN0QixRQUFZdUUsSUFBUjBiLEVBQW1CeEYsRUFBSWtGLGVBQWdCLE9BQ3RDLEdBQW1CLG1CQUFSTSxFQUFvQnhGLEVBQUlrRixjQUFnQk0sT0FDbkQsR0FBbUIsaUJBQVJBLEdBQTRCLE9BQVJBLEVBQ25DLElBQUssSUFBSTlXLEVBQUksRUFBR0EsRUFBSThXLEVBQUkvZixPQUFRaUosSUFDL0JzUixFQUFJZ0Ysc0JBQXNCUSxFQUFJOVcsSUFBTW5KLEdBQVksa0JBQzdDeWEsRUFBSWdGLHNCQUFzQlEsR0FBT2pnQixHQUFZLGNBRW5Ea2dCLFFBQVMsU0FBVUQsR0FDbEIsUUFBWTFiLElBQVIwYixFQUFtQnhGLEVBQUltRixlQUFnQixPQUN0QyxHQUFtQixpQkFBUkssR0FBNEIsT0FBUkEsRUFDbkMsSUFBSyxJQUFJOVcsRUFBSSxFQUFHQSxFQUFJOFcsRUFBSS9mLE9BQVFpSixJQUMvQnNSLEVBQUlpRixzQkFBc0JPLEVBQUk5VyxLQUFNLE9BQ2pDc1IsRUFBSWlGLHNCQUFzQk8sSUFBTyxHQUV2Q3ZGLFFBQVMsU0FBVTFhLEdBQ2xCeWEsRUFBSXFGLGlCQUFpQmxlLEtBQUs1QixJQUUzQm1nQixrQkFBbUIsU0FBVW5nQixHQUM1QnlhLEVBQUlxRixpQkFBaUJsZSxLQUFLNUIsSUFFM0JvZ0IscUJBQXNCLFNBQVVwZ0IsR0FDL0IsSUFBSXFnQixFQUFNNUYsRUFBSXFGLGlCQUFpQnRkLFFBQVF4QyxHQUNuQ3FnQixHQUFPLEdBQUc1RixFQUFJcUYsaUJBQWlCUSxPQUFPRCxFQUFLLElBRWhERSxXQUFZLFdBRVgsT0FEQWhoQixLQUFLc2dCLGtCQUFtQixFQUNoQjFDLEdBQ1AsSUFBSyxPQUNKTixFQUE2QixHQUM3QjdVLE9BQU9pQixLQUFLNFIsRUFBb0JpRSxNQUFNM2UsU0FBUSxTQUFVdUUsR0FDdkRtVyxFQUFvQmlFLEtBQUtwYSxHQUN4QmdVLEVBQ0FtRSxNQUdGTyxFQUFVLFNBQ1YsTUFDRCxJQUFLLFFBQ0pwVixPQUFPaUIsS0FBSzRSLEVBQW9CaUUsTUFBTTNlLFNBQVEsU0FBVXVFLEdBQ3ZEbVcsRUFBb0JpRSxLQUFLcGEsR0FDeEJnVSxFQUNBbUUsTUFHRixNQUNELElBQUssVUFDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssU0FDSEMsRUFBMkJBLEdBQTRCLElBQUlsYixLQUMzRDhXLEtBVUp2SyxNQUFPd1AsRUFDUHJRLE1BQU9nUixFQUNQa0MsT0FBUSxTQUFVN0UsR0FDakIsSUFBS0EsRUFBRyxPQUFPd0IsRUFDZkQsRUFBeUJ0YixLQUFLK1osSUFFL0I4RSxpQkFBa0IsU0FBVTlFLEdBQzNCdUIsRUFBeUJ0YixLQUFLK1osSUFFL0IrRSxvQkFBcUIsU0FBVS9FLEdBQzlCLElBQUkwRSxFQUFNbkQsRUFBeUIxYSxRQUFRbVosR0FDdkMwRSxHQUFPLEdBQUduRCxFQUF5Qm9ELE9BQU9ELEVBQUssSUFJcERuUSxLQUFNNk0sRUFBa0JyRSxJQUV6QmlFLE9BQXFCcFksRUFDZGtXLEdBN0pQN1csRUFBT3ViLFFBQVVsQyxFQUNqQnJaLEVBQU93YixTQUFXLEdBQ2xCbkMsRUFBaUIsR0FDakI5VSxFQUFROFMsUUFBVUEsS0FHbkJKLEVBQW9CcUQsS0FBTyxHQUMzQnJELEVBQW9CaUUsS0FBTyxJLFNDaEMzQixJQUFJNkIsRUFDQTlGLEVBQW9Cdk0sRUFBRXNTLGdCQUFlRCxFQUFZOUYsRUFBb0J2TSxFQUFFdVMsU0FBVyxJQUN0RixJQUFJdmdCLEVBQVd1YSxFQUFvQnZNLEVBQUVoTyxTQUNyQyxJQUFLcWdCLEdBQWFyZ0IsSUFDYkEsRUFBU3VZLGdCQUNaOEgsRUFBWXJnQixFQUFTdVksY0FBYzNHLE1BQy9CeU8sR0FBVyxDQUNmLElBQUk3SCxFQUFVeFksRUFBU3lZLHFCQUFxQixVQUN6Q0QsRUFBUTVZLFNBQVF5Z0IsRUFBWTdILEVBQVFBLEVBQVE1WSxPQUFTLEdBQUdnUyxLQUs3RCxJQUFLeU8sRUFBVyxNQUFNLElBQUk5QyxNQUFNLHlEQUNoQzhDLEVBQVlBLEVBQVVwUSxRQUFRLE9BQVEsSUFBSUEsUUFBUSxRQUFTLElBQUlBLFFBQVEsWUFBYSxLQUNwRnNLLEVBQW9CaUcsRUFBSUgsRyxHOUZmcEIzaEIsRUFBbUIsQ0FBQ3FjLEVBQVMwRixFQUFVeEMsRUFBU3lDLEtBQ25ELElBQUlDLEVBQVUzZ0IsU0FBU0MsY0FBYyxRQXdCckMsT0F0QkEwZ0IsRUFBUUMsSUFBTSxhQUNkRCxFQUFRcFIsS0FBTyxXQWlCZm9SLEVBQVExRSxRQUFVMEUsRUFBUXpFLE9BaEJKRixJQUdyQixHQURBMkUsRUFBUTFFLFFBQVUwRSxFQUFRekUsT0FBUyxLQUNoQixTQUFmRixFQUFNek0sS0FDVDBPLFFBQ00sQ0FDTixJQUFJNEMsRUFBWTdFLElBQXlCLFNBQWZBLEVBQU16TSxLQUFrQixVQUFZeU0sRUFBTXpNLE1BQ2hFdVIsRUFBVzlFLEdBQVNBLEVBQU01WSxRQUFVNFksRUFBTTVZLE9BQU9rVSxNQUFRbUosRUFDekRwQyxFQUFNLElBQUlkLE1BQU0scUJBQXVCeEMsRUFBVSxjQUFnQitGLEVBQVcsS0FDaEZ6QyxFQUFJMEMsS0FBTyx3QkFDWDFDLEVBQUk5TyxLQUFPc1IsRUFDWHhDLEVBQUlNLFFBQVVtQyxFQUNkSCxFQUFRL0ksV0FBV0MsWUFBWThJLEdBQy9CRCxFQUFPckMsS0FJVHNDLEVBQVFySixLQUFPbUosRUFFZnpnQixTQUFTb2MsS0FBS3piLFlBQVlnZ0IsR0FDbkJBLEdBRUpoaUIsRUFBaUIsQ0FBQzJZLEVBQU1tSixLQUUzQixJQURBLElBQUlPLEVBQW1CaGhCLFNBQVN5WSxxQkFBcUIsUUFDN0M1UCxFQUFJLEVBQUdBLEVBQUltWSxFQUFpQnBoQixPQUFRaUosSUFBSyxDQUNoRCxJQUNJb1ksR0FEQUMsRUFBTUYsRUFBaUJuWSxJQUNSNlMsYUFBYSxjQUFnQndGLEVBQUl4RixhQUFhLFFBQ2pFLEdBQWUsZUFBWndGLEVBQUlOLE1BQXlCSyxJQUFhM0osR0FBUTJKLElBQWFSLEdBQVcsT0FBT1MsRUFFckYsSUFBSUMsRUFBb0JuaEIsU0FBU3lZLHFCQUFxQixTQUN0RCxJQUFRNVAsRUFBSSxFQUFHQSxFQUFJc1ksRUFBa0J2aEIsT0FBUWlKLElBQUssQ0FDakQsSUFBSXFZLEVBRUosSUFESUQsR0FEQUMsRUFBTUMsRUFBa0J0WSxJQUNUNlMsYUFBYSxnQkFDaEJwRSxHQUFRMkosSUFBYVIsRUFBVSxPQUFPUyxJQWFwRHRpQixFQUFVLEdBQ1ZDLEVBQVUsR0FDVkMsRUFBZ0IrSSxJQUNaLENBQUV1UyxRQUFTLEtBQ2pCLElBQUksSUFBSXZSLEVBQUksRUFBR0EsRUFBSWpLLEVBQVFnQixPQUFRaUosSUFBSyxDQUN2QyxJQUFJdVksRUFBU3hpQixFQUFRaUssR0FDbEJ1WSxFQUFPeEosWUFBWXdKLEVBQU94SixXQUFXQyxZQUFZdUosR0FFckR4aUIsRUFBUWdCLE9BQVMsR0FDZm9OLE1BQU8sS0FDVCxJQUFJLElBQUluRSxFQUFJLEVBQUdBLEVBQUloSyxFQUFRZSxPQUFRaUosSUFBS2hLLEVBQVFnSyxHQUFHK1gsSUFBTSxhQUN6RC9oQixFQUFRZSxPQUFTLEtBR25CMmEsRUFBb0JxRCxLQUFLeUQsUUFBVSxDQUFDQyxFQUFVQyxFQUFlQyxFQUFnQjNELEVBQVU0RCxFQUFlQyxLQUNyR0QsRUFBY25nQixLQUFLeEMsR0FDbkJ3aUIsRUFBU3poQixTQUFTa2IsSUFDakIsSUFBSXpELEVBQU9pRCxFQUFvQlUsU0FBU0YsR0FDcEMwRixFQUFXbEcsRUFBb0JpRyxFQUFJbEosRUFDdkMsTUFBTThKLEVBQVN6aUIsRUFBZTJZLEVBQU1tSixHQUNoQ1csR0FDSnZELEVBQVN2YyxLQUFLLElBQUk0YixTQUFRLENBQUNlLEVBQVN5QyxLQUNuQyxJQUFJUSxFQUFNeGlCLEVBQWlCcWMsRUFBUzBGLEdBQVUsS0FDN0NTLEVBQUlTLEdBQUssUUFDVFQsRUFBSU4sSUFBTSxVQUNWM0MsTUFDRXlDLEdBQ0g5aEIsRUFBUTBDLEtBQUs4ZixHQUNidmlCLEVBQVF5QyxLQUFLNGYsVyxNK0YxRWhCLElBa0RJVSxFQUNBQyxFQUNBQyxFQUNBQyxFQXJEQUMsRUFBa0IsQ0FDckJDLElBQUssR0FXRkMsRUFBd0IsR0FDNUIsU0FBU0MsRUFBZ0JwSCxHQUN4QixPQUFPLElBQUltQyxTQUFRLENBQUNlLEVBQVN5QyxLQUM1QndCLEVBQXNCbkgsR0FBV2tELEVBRWpDLElBQUk1RyxFQUFNa0QsRUFBb0JpRyxFQUFJakcsRUFBb0JPLEdBQUdDLEdBRXJEelksRUFBUSxJQUFJaWIsTUFhaEJoRCxFQUFvQmMsRUFBRWhFLEdBWkYyRSxJQUNuQixHQUFHa0csRUFBc0JuSCxHQUFVLENBQ2xDbUgsRUFBc0JuSCxRQUFXOVcsRUFDakMsSUFBSTRjLEVBQVk3RSxJQUF5QixTQUFmQSxFQUFNek0sS0FBa0IsVUFBWXlNLEVBQU16TSxNQUNoRTZTLEVBQVVwRyxHQUFTQSxFQUFNNVksUUFBVTRZLEVBQU01WSxPQUFPd08sSUFDcER0UCxFQUFNK2YsUUFBVSw0QkFBOEJ0SCxFQUFVLGNBQWdCOEYsRUFBWSxLQUFPdUIsRUFBVSxJQUNyRzlmLEVBQU13UixLQUFPLGlCQUNieFIsRUFBTWlOLEtBQU9zUixFQUNidmUsRUFBTXFjLFFBQVV5RCxFQUNoQjFCLEVBQU9wZSxVQXlCWCxTQUFTeEQsRUFBYStJLEdBR3JCLFNBQVN5YSxFQUF5QkMsR0FVakMsSUFUQSxJQUFJakUsRUFBa0IsQ0FBQ2lFLEdBQ25CQyxFQUF1QixHQUV2QkMsRUFBUW5FLEVBQWdCOVgsS0FBSSxTQUFVdEgsR0FDekMsTUFBTyxDQUNOd2pCLE1BQU8sQ0FBQ3hqQixHQUNSQSxHQUFJQSxNQUdDdWpCLEVBQU03aUIsT0FBUyxHQUFHLENBQ3hCLElBQUkraUIsRUFBWUYsRUFBTXhJLE1BQ2xCN0IsRUFBV3VLLEVBQVV6akIsR0FDckJ3akIsRUFBUUMsRUFBVUQsTUFDbEJwZixFQUFTaVgsRUFBb0J4TixFQUFFcUwsR0FDbkMsR0FDRTlVLEtBQ0FBLEVBQU82VyxJQUFJa0YsZUFBa0IvYixFQUFPNlcsSUFBSW9GLGtCQUYxQyxDQUtBLEdBQUlqYyxFQUFPNlcsSUFBSW1GLGNBQ2QsTUFBTyxDQUNOL1AsS0FBTSxnQkFDTm1ULE1BQU9BLEVBQ1B0SyxTQUFVQSxHQUdaLEdBQUk5VSxFQUFPNlcsSUFBSXNGLE1BQ2QsTUFBTyxDQUNObFEsS0FBTSxhQUNObVQsTUFBT0EsRUFDUHRLLFNBQVVBLEdBR1osSUFBSyxJQUFJdlAsRUFBSSxFQUFHQSxFQUFJdkYsRUFBT3ViLFFBQVFqZixPQUFRaUosSUFBSyxDQUMvQyxJQUFJK1osRUFBV3RmLEVBQU91YixRQUFRaFcsR0FDMUJnYSxFQUFTdEksRUFBb0J4TixFQUFFNlYsR0FDbkMsR0FBS0MsRUFBTCxDQUNBLEdBQUlBLEVBQU8xSSxJQUFJaUYsc0JBQXNCaEgsR0FDcEMsTUFBTyxDQUNON0ksS0FBTSxXQUNObVQsTUFBT0EsRUFBTWpWLE9BQU8sQ0FBQ21WLElBQ3JCeEssU0FBVUEsRUFDVndLLFNBQVVBLElBRytCLElBQXZDdEUsRUFBZ0JwYyxRQUFRMGdCLEtBQ3hCQyxFQUFPMUksSUFBSWdGLHNCQUFzQi9HLElBQy9Cb0ssRUFBcUJJLEtBQ3pCSixFQUFxQkksR0FBWSxJQUNsQ0UsRUFBWU4sRUFBcUJJLEdBQVcsQ0FBQ3hLLGFBR3ZDb0ssRUFBcUJJLEdBQzVCdEUsRUFBZ0JoZCxLQUFLc2hCLEdBQ3JCSCxFQUFNbmhCLEtBQUssQ0FDVm9oQixNQUFPQSxFQUFNalYsT0FBTyxDQUFDbVYsSUFDckIxakIsR0FBSTBqQixTQUtQLE1BQU8sQ0FDTnJULEtBQU0sV0FDTjZJLFNBQVVtSyxFQUNWakUsZ0JBQWlCQSxFQUNqQmtFLHFCQUFzQkEsR0FJeEIsU0FBU00sRUFBWWpXLEVBQUdDLEdBQ3ZCLElBQUssSUFBSWpFLEVBQUksRUFBR0EsRUFBSWlFLEVBQUVsTixPQUFRaUosSUFBSyxDQUNsQyxJQUFJL0gsRUFBT2dNLEVBQUVqRSxJQUNZLElBQXJCZ0UsRUFBRTNLLFFBQVFwQixJQUFjK0wsRUFBRXZMLEtBQUtSLElBM0VqQ3laLEVBQW9CclcsVUFBVXFXLEVBQW9CclcsRUFBRTZlLFNBQ3hEbkIsT0FBc0IzZCxFQWdGdEIsSUFBSXVlLEVBQXVCLEdBQ3ZCbEUsRUFBa0IsR0FDbEIwRSxFQUFnQixHQUVoQkMsRUFBd0IsU0FBK0IzZixHQUMxRDFDLFFBQVFtZSxLQUNQLDRCQUE4QnpiLEVBQU9wRSxHQUFLLHlCQUk1QyxJQUFLLElBQUlrWixLQUFZeUosRUFDcEIsR0FBSXRILEVBQW9CemEsRUFBRStoQixFQUFlekosR0FBVyxDQUNuRCxJQUVJaFMsRUFGQThjLEVBQW1CckIsRUFBY3pKLEdBWWpDK0ssR0FBYSxFQUNiQyxHQUFVLEVBQ1ZDLEdBQVksRUFDWkMsRUFBWSxHQUloQixRQWZDbGQsRUFERzhjLEVBQ01aLEVBQXlCbEssR0FFekIsQ0FDUjdJLEtBQU0sV0FDTjZJLFNBQVVBLElBUURzSyxRQUNWWSxFQUFZLHlCQUEyQmxkLEVBQU9zYyxNQUFNblYsS0FBSyxTQUVsRG5ILEVBQU9tSixNQUNkLElBQUssZ0JBQ0ExSCxFQUFRMGIsWUFBWTFiLEVBQVEwYixXQUFXbmQsR0FDdEN5QixFQUFRMmIsaUJBQ1pMLEVBQWEsSUFBSTVGLE1BQ2hCLG9DQUNDblgsRUFBT2dTLFNBQ1BrTCxJQUVILE1BQ0QsSUFBSyxXQUNBemIsRUFBUTBiLFlBQVkxYixFQUFRMGIsV0FBV25kLEdBQ3RDeUIsRUFBUTJiLGlCQUNaTCxFQUFhLElBQUk1RixNQUNoQiwyQ0FDQ25YLEVBQU9nUyxTQUNQLE9BQ0FoUyxFQUFPd2MsU0FDUFUsSUFFSCxNQUNELElBQUssYUFDQXpiLEVBQVE0YixjQUFjNWIsRUFBUTRiLGFBQWFyZCxHQUMxQ3lCLEVBQVE2YixtQkFDWlAsRUFBYSxJQUFJNUYsTUFDaEIsbUJBQXFCbkYsRUFBVyxtQkFBcUJrTCxJQUV2RCxNQUNELElBQUssV0FDQXpiLEVBQVE4YixZQUFZOWIsRUFBUThiLFdBQVd2ZCxHQUMzQ2dkLEdBQVUsRUFDVixNQUNELElBQUssV0FDQXZiLEVBQVErYixZQUFZL2IsRUFBUStiLFdBQVd4ZCxHQUMzQ2lkLEdBQVksRUFDWixNQUNELFFBQ0MsTUFBTSxJQUFJOUYsTUFBTSxvQkFBc0JuWCxFQUFPbUosTUFFL0MsR0FBSTRULEVBQ0gsTUFBTyxDQUNON2dCLE1BQU82Z0IsR0FHVCxHQUFJQyxFQUdILElBQUtoTCxLQUZMNEssRUFBYzVLLEdBQVk4SyxFQUMxQkosRUFBWXhFLEVBQWlCbFksRUFBT2tZLGlCQUNuQmxZLEVBQU9vYyxxQkFDbkJqSSxFQUFvQnphLEVBQUVzRyxFQUFPb2MscUJBQXNCcEssS0FDakRvSyxFQUFxQnBLLEtBQ3pCb0ssRUFBcUJwSyxHQUFZLElBQ2xDMEssRUFDQ04sRUFBcUJwSyxHQUNyQmhTLEVBQU9vYyxxQkFBcUJwSyxLQUs1QmlMLElBQ0hQLEVBQVl4RSxFQUFpQixDQUFDbFksRUFBT2dTLFdBQ3JDNEssRUFBYzVLLEdBQVk2SyxHQUk3QnBCLE9BQWdCNWQsRUFJaEIsSUFEQSxJQW1CSTRmLEVBbkJBQyxFQUE4QixHQUN6QkMsRUFBSSxFQUFHQSxFQUFJekYsRUFBZ0IxZSxPQUFRbWtCLElBQUssQ0FDaEQsSUFBSUMsRUFBbUIxRixFQUFnQnlGLEdBRXRDeEosRUFBb0J4TixFQUFFaVgsSUFDdEJ6SixFQUFvQnhOLEVBQUVpWCxHQUFrQjdKLElBQUlrRixlQUU1QzJELEVBQWNnQixLQUFzQmYsSUFFbkMxSSxFQUFvQnhOLEVBQUVpWCxHQUFrQjdKLElBQUlvRixrQkFFN0N1RSxFQUE0QnhpQixLQUFLLENBQ2hDZ0MsT0FBUTBnQixFQUNSckosUUFBU0osRUFBb0J4TixFQUFFaVgsR0FBa0I3SixJQUFJdUYsYUFDckR1RSxhQUFjMUosRUFBb0J4TixFQUFFaVgsR0FBa0I3SixJQUFJa0YsZ0JBTzdELE1BQU8sQ0FDTmpGLFFBQVMsV0FNUixJQUFJMkYsRUFMSitCLEVBQTJCamlCLFNBQVEsU0FBVWtiLFVBQ3JDaUgsRUFBZ0JqSCxNQUV4QitHLE9BQTZCN2QsRUFJN0IsSUFEQSxJQW9DSWlnQixFQXBDQXpCLEVBQVFuRSxFQUFnQi9WLFFBQ3JCa2EsRUFBTTdpQixPQUFTLEdBQUcsQ0FDeEIsSUFBSXdZLEVBQVdxSyxFQUFNeEksTUFDakIzVyxFQUFTaVgsRUFBb0J4TixFQUFFcUwsR0FDbkMsR0FBSzlVLEVBQUwsQ0FFQSxJQUFJc00sRUFBTyxHQUdQdVUsRUFBa0I3Z0IsRUFBTzZXLElBQUlxRixpQkFDakMsSUFBS3VFLEVBQUksRUFBR0EsRUFBSUksRUFBZ0J2a0IsT0FBUW1rQixJQUN2Q0ksRUFBZ0JKLEdBQUd4ZCxLQUFLLEtBQU1xSixHQWMvQixJQVpBMkssRUFBb0JrRSxLQUFLckcsR0FBWXhJLEVBR3JDdE0sRUFBTzZXLElBQUl5RSxRQUFTLFNBR2JyRSxFQUFvQnhOLEVBQUVxTCxVQUd0Qm9LLEVBQXFCcEssR0FHdkIyTCxFQUFJLEVBQUdBLEVBQUl6Z0IsRUFBT3diLFNBQVNsZixPQUFRbWtCLElBQUssQ0FDNUMsSUFBSUssRUFBUTdKLEVBQW9CeE4sRUFBRXpKLEVBQU93YixTQUFTaUYsSUFDN0NLLElBQ0xyRSxFQUFNcUUsRUFBTXZGLFFBQVEzYyxRQUFRa1csS0FDakIsR0FDVmdNLEVBQU12RixRQUFRbUIsT0FBT0QsRUFBSyxLQU83QixJQUFLLElBQUlpRSxLQUFvQnhCLEVBQzVCLEdBQUlqSSxFQUFvQnphLEVBQUUwaUIsRUFBc0J3QixLQUMvQzFnQixFQUFTaVgsRUFBb0J4TixFQUFFaVgsSUFJOUIsSUFGQUgsRUFDQ3JCLEVBQXFCd0IsR0FDakJELEVBQUksRUFBR0EsRUFBSUYsRUFBMkJqa0IsT0FBUW1rQixJQUNsREcsRUFBYUwsRUFBMkJFLElBQ3hDaEUsRUFBTXpjLEVBQU93YixTQUFTNWMsUUFBUWdpQixLQUNuQixHQUFHNWdCLEVBQU93YixTQUFTa0IsT0FBT0QsRUFBSyxJQU0vQy9TLE1BQU8sU0FBVW9SLEdBRWhCLElBQUssSUFBSW1FLEtBQWtCUyxFQUN0QnpJLEVBQW9CemEsRUFBRWtqQixFQUFlVCxLQUN4Q2hJLEVBQW9CTSxFQUFFMEgsR0FBa0JTLEVBQWNULElBS3hELElBQUssSUFBSTFaLEVBQUksRUFBR0EsRUFBSWtaLEVBQXFCbmlCLE9BQVFpSixJQUNoRGtaLEVBQXFCbFosR0FBRzBSLEdBSXpCLElBQUssSUFBSXlKLEtBQW9CeEIsRUFDNUIsR0FBSWpJLEVBQW9CemEsRUFBRTBpQixFQUFzQndCLEdBQW1CLENBQ2xFLElBQUkxZ0IsRUFBU2lYLEVBQW9CeE4sRUFBRWlYLEdBQ25DLEdBQUkxZ0IsRUFBUSxDQUNYdWdCLEVBQ0NyQixFQUFxQndCLEdBR3RCLElBRkEsSUFBSUssRUFBWSxHQUNaQyxFQUEyQixHQUN0QlAsRUFBSSxFQUFHQSxFQUFJRixFQUEyQmprQixPQUFRbWtCLElBQUssQ0FDM0QsSUFBSUcsRUFBYUwsRUFBMkJFLEdBQ3hDUSxFQUNIamhCLEVBQU82VyxJQUFJZ0Ysc0JBQXNCK0UsR0FDbEMsR0FBSUssRUFBZ0IsQ0FDbkIsSUFBMkMsSUFBdkNGLEVBQVVuaUIsUUFBUXFpQixHQUF3QixTQUM5Q0YsRUFBVS9pQixLQUFLaWpCLEdBQ2ZELEVBQXlCaGpCLEtBQUs0aUIsSUFHaEMsSUFBSyxJQUFJTSxFQUFJLEVBQUdBLEVBQUlILEVBQVV6a0IsT0FBUTRrQixJQUNyQyxJQUNDSCxFQUFVRyxHQUFHamUsS0FBSyxLQUFNc2QsR0FDdkIsTUFBT3hGLEdBQ0p4VyxFQUFRNGMsV0FDWDVjLEVBQVE0YyxVQUFVLENBQ2pCbFYsS0FBTSxpQkFDTjZJLFNBQVU0TCxFQUNWVSxhQUFjSixFQUF5QkUsR0FDdkNsaUIsTUFBTytiLElBR0p4VyxFQUFROGMsZUFDWnZHLEVBQVlDLEtBU2xCLElBQUssSUFBSXZlLEVBQUksRUFBR0EsRUFBSWdrQixFQUE0QmxrQixPQUFRRSxJQUFLLENBQzVELElBQUlnQixFQUFPZ2pCLEVBQTRCaGtCLEdBQ25Dc1ksRUFBV3RYLEVBQUt3QyxPQUNwQixJQUNDeEMsRUFBSzZaLFFBQVF2QyxHQUNaLE1BQU9pRyxHQUNSLEdBQWlDLG1CQUF0QnZkLEVBQUttakIsYUFDZixJQUNDbmpCLEVBQUttakIsYUFBYTVGLEdBQ2pCLE1BQU91RyxHQUNKL2MsRUFBUTRjLFdBQ1g1YyxFQUFRNGMsVUFBVSxDQUNqQmxWLEtBQU0sb0NBQ042SSxTQUFVQSxFQUNWOVYsTUFBT3NpQixFQUNQQyxjQUFleEcsSUFHWnhXLEVBQVE4YyxlQUNadkcsRUFBWXdHLEdBRWJ4RyxFQUFZQyxRQUdUeFcsRUFBUTRjLFdBQ1g1YyxFQUFRNGMsVUFBVSxDQUNqQmxWLEtBQU0sc0JBQ042SSxTQUFVQSxFQUNWOVYsTUFBTytiLElBR0p4VyxFQUFROGMsZUFDWnZHLEVBQVlDLElBTWhCLE9BQU9DLElBblhWalksS0FBMEIsb0JBQUksQ0FBQzBVLEVBQVMrSixFQUFhQyxLQUNwRCxJQUFJLElBQUkzTSxLQUFZME0sRUFDaEJ2SyxFQUFvQnphLEVBQUVnbEIsRUFBYTFNLEtBQ3JDeUosRUFBY3pKLEdBQVkwTSxFQUFZMU0sSUFJckMyTSxHQUFTaEQsRUFBcUJ6Z0IsS0FBS3lqQixHQUNuQzdDLEVBQXNCbkgsS0FDeEJtSCxFQUFzQm5ILEtBQ3RCbUgsRUFBc0JuSCxRQUFXOVcsSUE2V25Dc1csRUFBb0JpRSxLQUFLd0csTUFBUSxTQUFVNU0sRUFBVXFKLEdBQy9DSSxJQUNKQSxFQUFnQixHQUNoQkUsRUFBdUIsR0FDdkJELEVBQTZCLEdBQzdCTCxFQUFjbmdCLEtBQUt4QyxJQUVmeWIsRUFBb0J6YSxFQUFFK2hCLEVBQWV6SixLQUN6Q3lKLEVBQWN6SixHQUFZbUMsRUFBb0JNLEVBQUV6QyxLQUdsRG1DLEVBQW9CcUQsS0FBS29ILE1BQVEsU0FDaEMxRCxFQUNBQyxFQUNBQyxFQUNBM0QsRUFDQTRELEVBQ0FDLEdBRUFELEVBQWNuZ0IsS0FBS3hDLEdBQ25COGlCLEVBQXNCLEdBQ3RCRSxFQUE2QlAsRUFDN0JNLEVBQWdCTCxFQUFlekgsUUFBTyxTQUFVb0IsRUFBSy9XLEdBRXBELE9BREErVyxFQUFJL1csSUFBTyxFQUNKK1csSUFDTCxJQUNINEcsRUFBdUIsR0FDdkJULEVBQVN6aEIsU0FBUSxTQUFVa2IsR0FFekJSLEVBQW9CemEsRUFBRWtpQixFQUFpQmpILFNBQ1Y5VyxJQUE3QitkLEVBQWdCakgsS0FFaEI4QyxFQUFTdmMsS0FBSzZnQixFQUFnQnBILElBQzlCNkcsRUFBb0I3RyxJQUFXLE1BRzdCUixFQUFvQnJXLElBQ3ZCcVcsRUFBb0JyVyxFQUFFNmUsU0FBVyxTQUFVaEksRUFBUzhDLEdBRWxEK0QsSUFDQ3JILEVBQW9CemEsRUFBRThoQixFQUFxQjdHLElBQzVDUixFQUFvQnphLEVBQUVraUIsRUFBaUJqSCxTQUNWOVcsSUFBN0IrZCxFQUFnQmpILEtBRWhCOEMsRUFBU3ZjLEtBQUs2Z0IsRUFBZ0JwSCxJQUM5QjZHLEVBQW9CN0csSUFBVyxNQU1uQ1IsRUFBb0JpRCxLQUFPLEtBQzFCLEdBQXFCLG9CQUFWeUgsTUFBdUIsTUFBTSxJQUFJMUgsTUFBTSxzQ0FDbEQsT0FBTzBILE1BQU0xSyxFQUFvQmlHLEVBQUlqRyxFQUFvQlcsUUFBUWtDLE1BQU04SCxJQUN0RSxHQUF1QixNQUFwQkEsRUFBU2hGLE9BQVosQ0FDQSxJQUFJZ0YsRUFBU0MsR0FBSSxNQUFNLElBQUk1SCxNQUFNLG1DQUFxQzJILEVBQVNFLFlBQy9FLE9BQU9GLEVBQVNHLGEsR0NyZGxCOUssRUFBb0IsTyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwiYWpzOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiBmbihldmVudCkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHQ7XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsInZhciBjcmVhdGVTdHlsZXNoZWV0ID0gKGNodW5rSWQsIGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpID0+IHtcblx0dmFyIGxpbmtUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRsaW5rVGFnLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXHRsaW5rVGFnLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdHZhciBvbkxpbmtDb21wbGV0ZSA9IChldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcy5cblx0XHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG51bGw7XG5cdFx0aWYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJykge1xuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0dmFyIHJlYWxIcmVmID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5ocmVmIHx8IGZ1bGxocmVmO1xuXHRcdFx0dmFyIGVyciA9IG5ldyBFcnJvcihcIkxvYWRpbmcgQ1NTIGNodW5rIFwiICsgY2h1bmtJZCArIFwiIGZhaWxlZC5cXG4oXCIgKyByZWFsSHJlZiArIFwiKVwiKTtcblx0XHRcdGVyci5jb2RlID0gXCJDU1NfQ0hVTktfTE9BRF9GQUlMRURcIjtcblx0XHRcdGVyci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0ZXJyLnJlcXVlc3QgPSByZWFsSHJlZjtcblx0XHRcdGxpbmtUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaW5rVGFnKVxuXHRcdFx0cmVqZWN0KGVycik7XG5cdFx0fVxuXHR9XG5cdGxpbmtUYWcub25lcnJvciA9IGxpbmtUYWcub25sb2FkID0gb25MaW5rQ29tcGxldGU7XG5cdGxpbmtUYWcuaHJlZiA9IGZ1bGxocmVmO1xuXG5cdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGlua1RhZyk7XG5cdHJldHVybiBsaW5rVGFnO1xufTtcbnZhciBmaW5kU3R5bGVzaGVldCA9IChocmVmLCBmdWxsaHJlZikgPT4ge1xuXHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuXHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gdGFnO1xuXHR9XG5cdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuXHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHRhZztcblx0fVxufTtcbnZhciBsb2FkU3R5bGVzaGVldCA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0aWYoZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuXHRcdGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCk7XG5cdH0pO1xufVxuLy8gbm8gY2h1bmsgbG9hZGluZ1xuXG52YXIgb2xkVGFncyA9IFtdO1xudmFyIG5ld1RhZ3MgPSBbXTtcbnZhciBhcHBseUhhbmRsZXIgPSAob3B0aW9ucykgPT4ge1xuXHRyZXR1cm4geyBkaXNwb3NlOiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9sZFRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBvbGRUYWcgPSBvbGRUYWdzW2ldO1xuXHRcdFx0aWYob2xkVGFnLnBhcmVudE5vZGUpIG9sZFRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9sZFRhZyk7XG5cdFx0fVxuXHRcdG9sZFRhZ3MubGVuZ3RoID0gMDtcblx0fSwgYXBwbHk6ICgpID0+IHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbmV3VGFncy5sZW5ndGg7IGkrKykgbmV3VGFnc1tpXS5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0XHRuZXdUYWdzLmxlbmd0aCA9IDA7XG5cdH0gfTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5taW5pQ3NzID0gKGNodW5rSWRzLCByZW1vdmVkQ2h1bmtzLCByZW1vdmVkTW9kdWxlcywgcHJvbWlzZXMsIGFwcGx5SGFuZGxlcnMsIHVwZGF0ZWRNb2R1bGVzTGlzdCkgPT4ge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y2h1bmtJZHMuZm9yRWFjaCgoY2h1bmtJZCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdGNvbnN0IG9sZFRhZyA9IGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKTtcblx0XHRpZighb2xkVGFnKSByZXR1cm47XG5cdFx0cHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR2YXIgdGFnID0gY3JlYXRlU3R5bGVzaGVldChjaHVua0lkLCBmdWxsaHJlZiwgKCkgPT4ge1xuXHRcdFx0XHR0YWcuYXMgPSBcInN0eWxlXCI7XG5cdFx0XHRcdHRhZy5yZWwgPSBcInByZWxvYWRcIjtcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fSwgcmVqZWN0KTtcblx0XHRcdG9sZFRhZ3MucHVzaChvbGRUYWcpO1xuXHRcdFx0bmV3VGFncy5wdXNoKHRhZyk7XG5cdFx0fSkpO1xuXHR9KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUYXNrIHtcbiAgY29uc3RydWN0b3IoZGV0YWlscykge1xuICAgIHRoaXMuZGV0YWlscyA9IGRldGFpbHM7XG4gICAgdGhpcy5pZCA9IE1hdGgucmFuZG9tKCkgKyAoK25ldyBEYXRlKCkpO1xuICAgIHRoaXMucGlubmVkID0gZmFsc2U7XG4gIH1cblxuICB0b2dnbGVQaW5uZWQoKSB7XG4gICAgdGhpcy5waW5uZWQgPSAhdGhpcy5waW5uZWQ7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkVGFza3NMaXN0KGFycmF5TGlzdCwgY29udGFpbmVyRWwsIGNhbGxiYWNrKSB7XG4gIGNvbnRhaW5lckVsLmlubmVySFRNTCA9ICcnO1xuICBpZiAoYXJyYXlMaXN0Lmxlbmd0aCkge1xuICAgIGFycmF5TGlzdC5mb3JFYWNoKChvKSA9PiB7XG4gICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZWwuZGF0YXNldC50YXNrID0gJyc7XG4gICAgICBlbC5kYXRhc2V0LnRhc2tJZCA9IG8uaWQ7XG4gICAgICBlbC5pbm5lckhUTUwgPSBgPGRpdiBkYXRhLXNlY3Rpb249XCJkZXRhaWxzXCI+JHtvLmRldGFpbHN9PC9kaXY+YDtcblxuICAgICAgY29uc3QgYnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBidXR0b24uaW5uZXJIVE1MID0gYDxkaXYgZGF0YS1zZWN0aW9uPVwiZGV0YWlsc1wiIGNsYXNzPVwiYnV0dG9uX3Bpbm5lZFwiIGRhdGEtdGFzay1pZD1cIiR7by5pZH1cIiBkYXRhLWFjdGlvbj1cInBpblwiPtCX0LDQutGA0LXQv9C40YLRjC/QvtGC0LrRgNC10L/QuNGC0Yw8L2Rpdj5gO1xuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb25zdCB0YXNrVG9QaW4gPSBhcnJheUxpc3QuZmluZEluZGV4KChlbCkgPT4gZWwuaWQgPT09IG8uaWQpO1xuICAgICAgICBpZiAodGFza1RvUGluICE9PSAtMSkge1xuICAgICAgICAgIGFycmF5TGlzdFt0YXNrVG9QaW5dLnRvZ2dsZVBpbm5lZCgpO1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZWwuYXBwZW5kKGJ1dHRvbik7XG4gICAgICBjb250YWluZXJFbC5hcHBlbmRDaGlsZChlbCk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coJ2RkZCcpO1xuICAgIGNvbnN0IGl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBpdGVtLmlubmVySFRNTCA9ICc8ZGl2IGRhdGEtc2VjdGlvbj1cImRldGFpbHNcIj7QndC10YIg0LfQsNC00LDRhzwvZGl2Pic7XG4gICAgY29udGFpbmVyRWwuYXBwZW5kQ2hpbGQoaXRlbSk7XG4gIH1cbn1cbiIsImltcG9ydCBUYXNrIGZyb20gJy4vdGFzayc7XG5pbXBvcnQgYnVpbGRUYXNrc0xpc3QgZnJvbSAnLi9idWlsZFRhc2tzTGlzdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhc2tzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy50YXNrcyA9IFtdO1xuICAgIHRoaXMuY29udGFpbmVycyA9IHtcbiAgICAgIHRhc2tzTGlzdENvbnRhaW5lcjogbnVsbCxcbiAgICAgIHRhc2tzTGlzdFBpbm5lZENvbnRhaW5lcjogbnVsbCxcbiAgICB9O1xuICAgIHRoaXMuc2VhcmNoRmllbGQgPSAnJztcbiAgfVxuXG4gIGFkZFRhc2sodGFza1RleHQpIHtcbiAgICB0aGlzLnRhc2tzLnB1c2gobmV3IFRhc2sodGFza1RleHQpKTtcbiAgICB0aGlzLnNlYXJjaEZpZWxkID0gJyc7XG4gIH1cblxuICBnZXQgY29tbW9uVGFza3MoKSB7XG4gICAgcmV0dXJuIHRoaXMudGFza3MuZmlsdGVyKChlbCkgPT4gIWVsLnBpbm5lZCk7XG4gIH1cblxuICBnZXQgcGlubmVkVGFza3MoKSB7XG4gICAgcmV0dXJuIHRoaXMudGFza3MuZmlsdGVyKChlbCkgPT4gZWwucGlubmVkKTtcbiAgfVxuXG4gIGdldCBmaWx0ZXJlZFRhc2tzKCkge1xuICAgIGlmICghdGhpcy5zZWFyY2hGaWVsZCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tbW9uVGFza3M7XG4gICAgfVxuICAgIGNvbnN0IHNlYXJjaEluID0gdGhpcy5zZWFyY2hGaWVsZC50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBhcnJheSA9IHRoaXMuY29tbW9uVGFza3MuZmlsdGVyKChpdGVtKSA9PiB7XG4gICAgICBpZiAoU3RyaW5nKGl0ZW0uZGV0YWlscykudG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaEluKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgYnVpbGRIdG1sKCkge1xuICAgIGNvbnN0IGNhbGxiYWNrQmluZCA9IHRoaXMuYnVpbGRIdG1sLmJpbmQodGhpcyk7XG4gICAgYnVpbGRUYXNrc0xpc3QodGhpcy5maWx0ZXJlZFRhc2tzLCB0aGlzLmNvbnRhaW5lcnMudGFza3NMaXN0Q29udGFpbmVyLCBjYWxsYmFja0JpbmQpO1xuICAgIGJ1aWxkVGFza3NMaXN0KHRoaXMucGlubmVkVGFza3MsIHRoaXMuY29udGFpbmVycy50YXNrc0xpc3RQaW5uZWRDb250YWluZXIsIGNhbGxiYWNrQmluZCk7XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEVycm9ySHRtbCB7XG4gIGNvbnN0cnVjdG9yKHRleHQpIHtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICB9XG5cbiAgZXJyb3JNb3ZlSW5IdG1sKGNvbnRhaW5lcikge1xuICAgIGNvbnN0IGVycm9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZXJyb3IuaW5uZXJIVE1MID0gYNCS0L3QuNC80LDQvdC40LU6ICR7dGhpcy50ZXh0fWA7XG4gICAgY29udGFpbmVyLmFwcGVuZChlcnJvcik7XG4gIH1cblxuICBlcnJvckNsZWFyKGNvbnRhaW5lcikge1xuICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgfVxufVxuIiwiaW1wb3J0IFRhc2tzIGZyb20gJy4vdGFza3MnO1xuaW1wb3J0IEVycm9ySHRtbCBmcm9tICcuL2Vycm9yJztcblxuLy8g0JLQuNC00LbQtdGCINC30LDQtNCw0YdcbmNvbnN0IGFkZFRhc2tXaWRnZXRFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXdpZGdldD1hZGQtdGFzay13aWRnZXRdJyk7XG4vLyDQpNC+0YDQvNCwINC00L7QsdCw0LLQu9C10L3QuNGPINC30LDQtNCw0YdcbmNvbnN0IGFkZFRhc2tGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtZm9ybT1cImFkZC10YXNrXCJdJyk7XG4vLyDQrdC70LXQvNC10L3RgiDQtNC+0LHQsNCy0LvQtdC90LjRjyDRgtC10LrRgdGC0LBcbmNvbnN0IGFkZFRhc2tUZXh0RWwgPSBhZGRUYXNrV2lkZ2V0RWwucXVlcnlTZWxlY3RvcignW2RhdGEtaWQ9YWRkLXRhc2stdGV4dF0nKTtcbi8vINCe0LHRidC40LUg0LfQsNC00LDRh9C4XG5jb25zdCB0YXNrc0xpc3QgPSBhZGRUYXNrV2lkZ2V0RWwucXVlcnlTZWxlY3RvcignW2RhdGEtc2VjdGlvbj10YXNrcy1saXN0XScpO1xuLy8g0JfQsNC60YDQtdC/0LvQtdC90L3Ri9C1INC30LDQtNCw0YfQuFxuY29uc3QgdGFza3NMaXN0UGlubmVkID0gYWRkVGFza1dpZGdldEVsLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXNlY3Rpb249dGFza3MtbGlzdC1waW5uZWRdJyk7XG4vLyDQnNC10YHRgtC+INC00LvRjyDQvtGI0LjQsdC+0LpcbmNvbnN0IGFkZEVycm9yUGxhY2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1zZWN0aW9uPVwiZXJyb3JcIl0nKTtcbi8vINCS0YHQtSDQt9Cw0LTQsNGH0LhcbmNvbnN0IGFsbFRhc2tzID0gbmV3IFRhc2tzKCk7XG5jb25zdCBlcnJvciA9IG5ldyBFcnJvckh0bWwoKTtcblxuLy8g0J7RgtGA0LjRgdC+0LLQutCwXG5hbGxUYXNrcy5jb250YWluZXJzLnRhc2tzTGlzdENvbnRhaW5lciA9IHRhc2tzTGlzdDtcbmFsbFRhc2tzLmNvbnRhaW5lcnMudGFza3NMaXN0UGlubmVkQ29udGFpbmVyID0gdGFza3NMaXN0UGlubmVkO1xuYWxsVGFza3MuYnVpbGRIdG1sKCk7XG5cbmFkZFRhc2tGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgaWYgKCFhZGRUYXNrVGV4dEVsLnZhbHVlKSB7XG4gICAgZXJyb3IudGV4dCA9ICfQn9GD0YHRgtC+0LUg0LfQvdCw0YfQtdC90LjQtSc7XG4gICAgZXJyb3IuZXJyb3JNb3ZlSW5IdG1sKGFkZEVycm9yUGxhY2UpO1xuICB9IGVsc2Uge1xuICAgIGFsbFRhc2tzLmFkZFRhc2soYWRkVGFza1RleHRFbC52YWx1ZSk7XG4gICAgYWRkVGFza1RleHRFbC52YWx1ZSA9ICcnO1xuICAgIGFsbFRhc2tzLmJ1aWxkSHRtbCgpO1xuICB9XG59KTtcblxuYWRkVGFza0Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4ge1xuICBhbGxUYXNrcy5zZWFyY2hGaWVsZCA9IGUudGFyZ2V0LnZhbHVlO1xuICBlcnJvci5lcnJvckNsZWFyKGFkZEVycm9yUGxhY2UpO1xuICBhbGxUYXNrcy5idWlsZEh0bWwoKTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcbnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdmb3JFYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9ICghU1RSSUNUX01FVEhPRCB8fCAhVVNFU19UT19MRU5HVEgpID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSA6IFtdLmZvckVhY2g7XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlck91dCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfT1VUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX09VVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyT3V0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJPdXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyT3V0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsLG5vLXRocm93LWxpdGVyYWxcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHRocm93IDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGNhY2hlID0ge307XG5cbnZhciB0aHJvd2VyID0gZnVuY3Rpb24gKGl0KSB7IHRocm93IGl0OyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgb3B0aW9ucykge1xuICBpZiAoaGFzKGNhY2hlLCBNRVRIT0RfTkFNRSkpIHJldHVybiBjYWNoZVtNRVRIT0RfTkFNRV07XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICB2YXIgQUNDRVNTT1JTID0gaGFzKG9wdGlvbnMsICdBQ0NFU1NPUlMnKSA/IG9wdGlvbnMuQUNDRVNTT1JTIDogZmFsc2U7XG4gIHZhciBhcmd1bWVudDAgPSBoYXMob3B0aW9ucywgMCkgPyBvcHRpb25zWzBdIDogdGhyb3dlcjtcbiAgdmFyIGFyZ3VtZW50MSA9IGhhcyhvcHRpb25zLCAxKSA/IG9wdGlvbnNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXSA9ICEhbWV0aG9kICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKEFDQ0VTU09SUyAmJiAhREVTQ1JJUFRPUlMpIHJldHVybiB0cnVlO1xuICAgIHZhciBPID0geyBsZW5ndGg6IC0xIH07XG5cbiAgICBpZiAoQUNDRVNTT1JTKSBkZWZpbmVQcm9wZXJ0eShPLCAxLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogdGhyb3dlciB9KTtcbiAgICBlbHNlIE9bMV0gPSAxO1xuXG4gICAgbWV0aG9kLmNhbGwoTywgYXJndW1lbnQwLCBhcmd1bWVudDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIERldGVjdCBJRTgncyBpbmNvbXBsZXRlIGRlZmluZVByb3BlcnR5IGltcGxlbWVudGF0aW9uXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sIDEsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pWzFdICE9IDc7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCduYXZpZ2F0b3InLCAndXNlckFnZW50JykgfHwgJyc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjg7XG52YXIgbWF0Y2gsIHZlcnNpb247XG5cbmlmICh2OCkge1xuICBtYXRjaCA9IHY4LnNwbGl0KCcuJyk7XG4gIHZlcnNpb24gPSBtYXRjaFswXSArIG1hdGNoWzFdO1xufSBlbHNlIGlmICh1c2VyQWdlbnQpIHtcbiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcXC8oXFxkKykvKTtcbiAgaWYgKCFtYXRjaCB8fCBtYXRjaFsxXSA+PSA3NCkge1xuICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTtcbiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcblxuLypcbiAgb3B0aW9ucy50YXJnZXQgICAgICAtIG5hbWUgb2YgdGhlIHRhcmdldCBvYmplY3RcbiAgb3B0aW9ucy5nbG9iYWwgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdFxuICBvcHRpb25zLnN0YXQgICAgICAgIC0gZXhwb3J0IGFzIHN0YXRpYyBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnByb3RvICAgICAgIC0gZXhwb3J0IGFzIHByb3RvdHlwZSBtZXRob2RzIG9mIHRhcmdldFxuICBvcHRpb25zLnJlYWwgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy5mb3JjZWQgICAgICAtIGV4cG9ydCBldmVuIGlmIHRoZSBuYXRpdmUgZmVhdHVyZSBpcyBhdmFpbGFibGVcbiAgb3B0aW9ucy5iaW5kICAgICAgICAtIGJpbmQgbWV0aG9kcyB0byB0aGUgdGFyZ2V0LCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMud3JhcCAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy51bnNhZmUgICAgICAtIHVzZSB0aGUgc2ltcGxlIGFzc2lnbm1lbnQgb2YgcHJvcGVydHkgaW5zdGVhZCBvZiBkZWxldGUgKyBkZWZpbmVQcm9wZXJ0eVxuICBvcHRpb25zLnNoYW0gICAgICAgIC0gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICBvcHRpb25zLmVudW1lcmFibGUgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHlcbiAgb3B0aW9ucy5ub1RhcmdldEdldCAtIHByZXZlbnQgY2FsbGluZyBhIGdldHRlciBvbiB0YXJnZXRcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgc2V0R2xvYmFsKFRBUkdFVCwge30pO1xuICB9IGVsc2Uge1xuICAgIHRhcmdldCA9IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlO1xuICB9XG4gIGlmICh0YXJnZXQpIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgIHNvdXJjZVByb3BlcnR5ID0gc291cmNlW2tleV07XG4gICAgaWYgKG9wdGlvbnMubm9UYXJnZXRHZXQpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpO1xuICAgICAgdGFyZ2V0UHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG4gICAgfSBlbHNlIHRhcmdldFByb3BlcnR5ID0gdGFyZ2V0W2tleV07XG4gICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTtcbiAgICAvLyBjb250YWluZWQgaW4gdGFyZ2V0XG4gICAgaWYgKCFGT1JDRUQgJiYgdGFyZ2V0UHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHR5cGVvZiBzb3VyY2VQcm9wZXJ0eSA9PT0gdHlwZW9mIHRhcmdldFByb3BlcnR5KSBjb250aW51ZTtcbiAgICAgIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5KTtcbiAgICB9XG4gICAgLy8gYWRkIGEgZmxhZyB0byBub3QgY29tcGxldGVseSBmdWxsIHBvbHlmaWxsc1xuICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHRhcmdldFByb3BlcnR5ICYmIHRhcmdldFByb3BlcnR5LnNoYW0pKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICByZWRlZmluZSh0YXJnZXQsIGtleSwgc291cmNlUHJvcGVydHksIG9wdGlvbnMpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIGZhY3RvcmllcyA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEMsIGFyZ3NMZW5ndGgsIGFyZ3MpIHtcbiAgaWYgKCEoYXJnc0xlbmd0aCBpbiBmYWN0b3JpZXMpKSB7XG4gICAgZm9yICh2YXIgbGlzdCA9IFtdLCBpID0gMDsgaSA8IGFyZ3NMZW5ndGg7IGkrKykgbGlzdFtpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgIGZhY3Rvcmllc1thcmdzTGVuZ3RoXSA9IEZ1bmN0aW9uKCdDLGEnLCAncmV0dXJuIG5ldyBDKCcgKyBsaXN0LmpvaW4oJywnKSArICcpJyk7XG4gIH0gcmV0dXJuIGZhY3Rvcmllc1thcmdzTGVuZ3RoXShDLCBhcmdzKTtcbn07XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGUuYmluZGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XG4gIHZhciBwYXJ0QXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBmdW5jdGlvbiBib3VuZCgvKiBhcmdzLi4uICovKSB7XG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kRnVuY3Rpb24gPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmRGdW5jdGlvbi5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZEZ1bmN0aW9uO1xufTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFyaWFibGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PSAnZnVuY3Rpb24nID8gdmFyaWFibGUgOiB1bmRlZmluZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pXG4gICAgOiBwYXRoW25hbWVzcGFjZV0gJiYgcGF0aFtuYW1lc3BhY2VdW21ldGhvZF0gfHwgZ2xvYmFsW25hbWVzcGFjZV0gJiYgZ2xvYmFsW25hbWVzcGFjZV1bbWV0aG9kXTtcbn07XG4iLCJ2YXIgY2hlY2sgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDtcbn07XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG5tb2R1bGUuZXhwb3J0cyA9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICBjaGVjayh0eXBlb2YgZ2xvYmFsVGhpcyA9PSAnb2JqZWN0JyAmJiBnbG9iYWxUaGlzKSB8fFxuICBjaGVjayh0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdykgfHxcbiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHxcbiAgY2hlY2sodHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkoKSB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIHNwbGl0ID0gJycuc3BsaXQ7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICh0eXBlb2Ygc3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2FycmF5XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gISFPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICByZXR1cm4gIVN0cmluZyhTeW1ib2woKSk7XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgZG9jdW1lbnRDcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcblxudmFyIEdUID0gJz4nO1xudmFyIExUID0gJzwnO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xudmFyIFNDUklQVCA9ICdzY3JpcHQnO1xudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xuXG52YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcblxudmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVggPSBmdW5jdGlvbiAoYWN0aXZlWERvY3VtZW50KSB7XG4gIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTtcbiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7XG4gIHZhciB0ZW1wID0gYWN0aXZlWERvY3VtZW50LnBhcmVudFdpbmRvdy5PYmplY3Q7XG4gIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7IC8vIGF2b2lkIG1lbW9yeSBsZWFrXG4gIHJldHVybiB0ZW1wO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7XG4gIHZhciBKUyA9ICdqYXZhJyArIFNDUklQVCArICc6JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgaHRtbC5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNDc1XG4gIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIHJldHVybiBpZnJhbWVEb2N1bWVudC5GO1xufTtcblxuLy8gQ2hlY2sgZm9yIGRvY3VtZW50LmRvbWFpbiBhbmQgYWN0aXZlIHggc3VwcG9ydFxuLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldFxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9pc3N1ZXMvMTUwXG4vLyB2YXJpYXRpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL2tpdGNhbWJyaWRnZS9lczUtc2hpbS9jb21taXQvNGY3MzhhYzA2NjM0NlxuLy8gYXZvaWQgSUUgR0MgYnVnXG52YXIgYWN0aXZlWERvY3VtZW50O1xudmFyIE51bGxQcm90b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpKSA6IGtleXM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIHZhciBzdGF0ZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgfVxuICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuICAgIGlmICghc3RhdGUuc291cmNlKSB7XG4gICAgICBzdGF0ZS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gICAgfVxuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjguMycsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIG5vbiA9ICdcXHUyMDBCXFx1MDA4NVxcdTE4MEUnO1xuXG4vLyBjaGVjayB0aGF0IGEgbWV0aG9kIHdvcmtzIHdpdGggdGhlIGNvcnJlY3QgbGlzdFxuLy8gb2Ygd2hpdGVzcGFjZXMgYW5kIGhhcyBhIGNvcnJlY3QgbmFtZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHtcbiAgcmV0dXJuIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF3aGl0ZXNwYWNlc1tNRVRIT0RfTkFNRV0oKSB8fCBub25bTUVUSE9EX05BTUVdKCkgIT0gbm9uIHx8IHdoaXRlc3BhY2VzW01FVEhPRF9OQU1FXS5uYW1lICE9PSBNRVRIT0RfTkFNRTtcbiAgfSk7XG59O1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIHdoaXRlc3BhY2UgPSAnWycgKyB3aGl0ZXNwYWNlcyArICddJztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyB3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAod2hpdGVzcGFjZSArIHdoaXRlc3BhY2UgKyAnKiQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltLCB0cmltU3RhcnQsIHRyaW1FbmQsIHRyaW1MZWZ0LCB0cmltUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gICAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kKDMpXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCJ2YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgIVN5bWJvbC5zaGFtXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhcyhXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpKSB7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzKFN5bWJvbCwgbmFtZSkpIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICBlbHNlIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsIi8vIGEgc3RyaW5nIG9mIGFsbCB2YWxpZCB1bmljb2RlIHdoaXRlc3BhY2VzXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LWxlblxubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbHRlcjtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RVc2VzVG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLXVzZXMtdG8tbGVuZ3RoJyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnZmlsdGVyJyk7XG4vLyBFZGdlIDE0LSBpc3N1ZVxudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ2ZpbHRlcicpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZmlsdGVyKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmluZEluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmRJbmRleDtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC11c2VzLXRvLWxlbmd0aCcpO1xuXG52YXIgRklORF9JTkRFWCA9ICdmaW5kSW5kZXgnO1xudmFyIFNLSVBTX0hPTEVTID0gdHJ1ZTtcblxudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoRklORF9JTkRFWCk7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORF9JTkRFWCBpbiBbXSkgQXJyYXkoMSlbRklORF9JTkRFWF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZGluZGV4XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBTS0lQU19IT0xFUyB8fCAhVVNFU19UT19MRU5HVEggfSwge1xuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgIHJldHVybiAkZmluZEluZGV4KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoRklORF9JTkRFWCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBbXS5mb3JFYWNoICE9IGZvckVhY2ggfSwge1xuICBmb3JFYWNoOiBmb3JFYWNoXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIG5hdGl2ZUluZGV4T2YgPSBbXS5pbmRleE9mO1xuXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhbmF0aXZlSW5kZXhPZiAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnaW5kZXhPZicpO1xudmFyIFVTRVNfVE9fTEVOR1RIID0gYXJyYXlNZXRob2RVc2VzVG9MZW5ndGgoJ2luZGV4T2YnLCB7IEFDQ0VTU09SUzogdHJ1ZSwgMTogMCB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IE5FR0FUSVZFX1pFUk8gfHwgIVNUUklDVF9NRVRIT0QgfHwgIVVTRVNfVE9fTEVOR1RIIH0sIHtcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/IG5hdGl2ZUluZGV4T2YuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxudmFyIERhdGVQcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIG5hdGl2ZURhdGVUb1N0cmluZyA9IERhdGVQcm90b3R5cGVbVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvdHlwZS5nZXRUaW1lO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVkZWZpbmUoRGF0ZVByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyBuYXRpdmVEYXRlVG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQnKTtcblxuLy8gYEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiQoeyB0YXJnZXQ6ICdGdW5jdGlvbicsIHByb3RvOiB0cnVlIH0sIHtcbiAgYmluZDogYmluZFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIG9iamVjdERlZmluZVByb3BlcnR5TW9kaWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIURFU0NSSVBUT1JTLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBkZWZpbmVQcm9wZXJ0eTogb2JqZWN0RGVmaW5lUHJvcGVydHlNb2RpbGUuZlxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG52YXIgZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW0nKSB9LCB7XG4gIHRyaW06IGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMpO1xuICB9XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlICYmIENvbGxlY3Rpb25Qcm90b3R5cGUuZm9yRWFjaCAhPT0gZm9yRWFjaCkgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgJ2ZvckVhY2gnLCBmb3JFYWNoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggPSBmb3JFYWNoO1xuICB9XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWVudiBicm93c2VyICovXG5cbi8qXG4gIGVzbGludC1kaXNhYmxlXG4gIG5vLWNvbnNvbGUsXG4gIGZ1bmMtbmFtZXNcbiovXG52YXIgbm9ybWFsaXplVXJsID0gcmVxdWlyZSgnLi9ub3JtYWxpemUtdXJsJyk7XG5cbnZhciBzcmNCeU1vZHVsZUlkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbnZhciBub0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJztcbnZhciBmb3JFYWNoID0gQXJyYXkucHJvdG90eXBlLmZvckVhY2g7XG5cbmZ1bmN0aW9uIGRlYm91bmNlKGZuLCB0aW1lKSB7XG4gIHZhciB0aW1lb3V0ID0gMDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcblxuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZ1bmN0aW9uQ2FsbCA9IGZ1bmN0aW9uIGZ1bmN0aW9uQ2FsbCgpIHtcbiAgICAgIHJldHVybiBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9O1xuXG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uQ2FsbCwgdGltZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0VXJsKG1vZHVsZUlkKSB7XG4gIHZhciBzcmMgPSBzcmNCeU1vZHVsZUlkW21vZHVsZUlkXTtcblxuICBpZiAoIXNyYykge1xuICAgIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7XG4gICAgICBzcmMgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gICAgICB2YXIgbGFzdFNjcmlwdFRhZyA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKGxhc3RTY3JpcHRUYWcpIHtcbiAgICAgICAgc3JjID0gbGFzdFNjcmlwdFRhZy5zcmM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3JjQnlNb2R1bGVJZFttb2R1bGVJZF0gPSBzcmM7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZpbGVNYXApIHtcbiAgICBpZiAoIXNyYykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHNwbGl0UmVzdWx0ID0gc3JjLnNwbGl0KC8oW15cXFxcL10rKVxcLmpzJC8pO1xuICAgIHZhciBmaWxlbmFtZSA9IHNwbGl0UmVzdWx0ICYmIHNwbGl0UmVzdWx0WzFdO1xuXG4gICAgaWYgKCFmaWxlbmFtZSkge1xuICAgICAgcmV0dXJuIFtzcmMucmVwbGFjZSgnLmpzJywgJy5jc3MnKV07XG4gICAgfVxuXG4gICAgaWYgKCFmaWxlTWFwKSB7XG4gICAgICByZXR1cm4gW3NyYy5yZXBsYWNlKCcuanMnLCAnLmNzcycpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsZU1hcC5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAobWFwUnVsZSkge1xuICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoXCJcIi5jb25jYXQoZmlsZW5hbWUsIFwiXFxcXC5qcyRcIiksICdnJyk7XG4gICAgICByZXR1cm4gbm9ybWFsaXplVXJsKHNyYy5yZXBsYWNlKHJlZywgXCJcIi5jb25jYXQobWFwUnVsZS5yZXBsYWNlKC97ZmlsZU5hbWV9L2csIGZpbGVuYW1lKSwgXCIuY3NzXCIpKSk7XG4gICAgfSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNzcyhlbCwgdXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgaWYgKCFlbC5ocmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxuXG4gICAgdXJsID0gZWwuaHJlZi5zcGxpdCgnPycpWzBdO1xuICB9XG5cbiAgaWYgKCFpc1VybFJlcXVlc3QodXJsKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChlbC5pc0xvYWRlZCA9PT0gZmFsc2UpIHtcbiAgICAvLyBXZSBzZWVtIHRvIGJlIGFib3V0IHRvIHJlcGxhY2UgYSBjc3MgbGluayB0aGF0IGhhc24ndCBsb2FkZWQgeWV0LlxuICAgIC8vIFdlJ3JlIHByb2JhYmx5IGNoYW5naW5nIHRoZSBzYW1lIGZpbGUgbW9yZSB0aGFuIG9uY2UuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCF1cmwgfHwgISh1cmwuaW5kZXhPZignLmNzcycpID4gLTEpKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgZWwudmlzaXRlZCA9IHRydWU7XG4gIHZhciBuZXdFbCA9IGVsLmNsb25lTm9kZSgpO1xuICBuZXdFbC5pc0xvYWRlZCA9IGZhbHNlO1xuICBuZXdFbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgIG5ld0VsLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgfSk7XG4gIG5ld0VsLmhyZWYgPSBcIlwiLmNvbmNhdCh1cmwsIFwiP1wiKS5jb25jYXQoRGF0ZS5ub3coKSk7XG5cbiAgaWYgKGVsLm5leHRTaWJsaW5nKSB7XG4gICAgZWwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3RWwsIGVsLm5leHRTaWJsaW5nKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKG5ld0VsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRSZWxvYWRVcmwoaHJlZiwgc3JjKSB7XG4gIHZhciByZXQ7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXG4gIGhyZWYgPSBub3JtYWxpemVVcmwoaHJlZiwge1xuICAgIHN0cmlwV1dXOiBmYWxzZVxuICB9KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGFycmF5LWNhbGxiYWNrLXJldHVyblxuXG4gIHNyYy5zb21lKGZ1bmN0aW9uICh1cmwpIHtcbiAgICBpZiAoaHJlZi5pbmRleE9mKHNyYykgPiAtMSkge1xuICAgICAgcmV0ID0gdXJsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHJlbG9hZFN0eWxlKHNyYykge1xuICBpZiAoIXNyYykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmsnKTtcbiAgdmFyIGxvYWRlZCA9IGZhbHNlO1xuICBmb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uIChlbCkge1xuICAgIGlmICghZWwuaHJlZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB1cmwgPSBnZXRSZWxvYWRVcmwoZWwuaHJlZiwgc3JjKTtcblxuICAgIGlmICghaXNVcmxSZXF1ZXN0KHVybCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWwudmlzaXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh1cmwpIHtcbiAgICAgIHVwZGF0ZUNzcyhlbCwgdXJsKTtcbiAgICAgIGxvYWRlZCA9IHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGxvYWRlZDtcbn1cblxuZnVuY3Rpb24gcmVsb2FkQWxsKCkge1xuICB2YXIgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaW5rJyk7XG4gIGZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKGVsLnZpc2l0ZWQgPT09IHRydWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB1cGRhdGVDc3MoZWwpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaXNVcmxSZXF1ZXN0KHVybCkge1xuICAvLyBBbiBVUkwgaXMgbm90IGFuIHJlcXVlc3QgaWZcbiAgLy8gSXQgaXMgbm90IGh0dHAgb3IgaHR0cHNcbiAgaWYgKCEvXmh0dHBzPzovaS50ZXN0KHVybCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobW9kdWxlSWQsIG9wdGlvbnMpIHtcbiAgaWYgKG5vRG9jdW1lbnQpIHtcbiAgICBjb25zb2xlLmxvZygnbm8gd2luZG93LmRvY3VtZW50IGZvdW5kLCB3aWxsIG5vdCBITVIgQ1NTJyk7XG4gICAgcmV0dXJuIG5vb3A7XG4gIH1cblxuICB2YXIgZ2V0U2NyaXB0U3JjID0gZ2V0Q3VycmVudFNjcmlwdFVybChtb2R1bGVJZCk7XG5cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBzcmMgPSBnZXRTY3JpcHRTcmMob3B0aW9ucy5maWxlbmFtZSk7XG4gICAgdmFyIHJlbG9hZGVkID0gcmVsb2FkU3R5bGUoc3JjKTtcblxuICAgIGlmIChvcHRpb25zLmxvY2Fscykge1xuICAgICAgY29uc29sZS5sb2coJ1tITVJdIERldGVjdGVkIGxvY2FsIGNzcyBtb2R1bGVzLiBSZWxvYWQgYWxsIGNzcycpO1xuICAgICAgcmVsb2FkQWxsKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHJlbG9hZGVkKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gY3NzIHJlbG9hZCAlcycsIHNyYy5qb2luKCcgJykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gUmVsb2FkIGFsbCBjc3MnKTtcbiAgICAgIHJlbG9hZEFsbCgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZWJvdW5jZSh1cGRhdGUsIDUwKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5mdW5jdGlvbiBub3JtYWxpemVVcmwocGF0aENvbXBvbmVudHMpIHtcbiAgcmV0dXJuIHBhdGhDb21wb25lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjdW11bGF0b3IsIGl0ZW0pIHtcbiAgICBzd2l0Y2ggKGl0ZW0pIHtcbiAgICAgIGNhc2UgJy4uJzpcbiAgICAgICAgYWNjdW11bGF0b3IucG9wKCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICcuJzpcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFjY3VtdWxhdG9yLnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9LCBbXSkuam9pbignLycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmxTdHJpbmcpIHtcbiAgdXJsU3RyaW5nID0gdXJsU3RyaW5nLnRyaW0oKTtcblxuICBpZiAoL15kYXRhOi9pLnRlc3QodXJsU3RyaW5nKSkge1xuICAgIHJldHVybiB1cmxTdHJpbmc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSB1cmxTdHJpbmcuaW5kZXhPZignLy8nKSAhPT0gLTEgPyB1cmxTdHJpbmcuc3BsaXQoJy8vJylbMF0gKyAnLy8nIDogJyc7XG4gIHZhciBjb21wb25lbnRzID0gdXJsU3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cChwcm90b2NvbCwgJ2knKSwgJycpLnNwbGl0KCcvJyk7XG4gIHZhciBob3N0ID0gY29tcG9uZW50c1swXS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcLiQvLCAnJyk7XG4gIGNvbXBvbmVudHNbMF0gPSAnJztcbiAgdmFyIHBhdGggPSBub3JtYWxpemVVcmwoY29tcG9uZW50cyk7XG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRoO1xufTsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTtcbiAgICBpZihtb2R1bGUuaG90KSB7XG4gICAgICAvLyAxNjExMjQ4NzM3NjQ5XG4gICAgICB2YXIgY3NzUmVsb2FkID0gcmVxdWlyZShcIi9ob21lL2FwcHZleW9yL3Byb2plY3RzL2Foai1ldmVudHMyL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qc1wiKShtb2R1bGUuaWQsIHtcImxvY2Fsc1wiOmZhbHNlfSk7XG4gICAgICBtb2R1bGUuaG90LmRpc3Bvc2UoY3NzUmVsb2FkKTtcbiAgICAgIG1vZHVsZS5ob3QuYWNjZXB0KHVuZGVmaW5lZCwgY3NzUmVsb2FkKTtcbiAgICB9XG4gICIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdHZhciBleGVjT3B0aW9ucyA9IHsgaWQ6IG1vZHVsZUlkLCBtb2R1bGU6IG1vZHVsZSwgZmFjdG9yeTogX193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0sIHJlcXVpcmU6IF9fd2VicGFja19yZXF1aXJlX18gfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5pLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikgeyBoYW5kbGVyKGV4ZWNPcHRpb25zKTsgfSk7XG5cdG1vZHVsZSA9IGV4ZWNPcHRpb25zLm1vZHVsZTtcblx0ZXhlY09wdGlvbnMuZmFjdG9yeS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBleGVjT3B0aW9ucy5yZXF1aXJlKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fO1xuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBleGVjdXRpb24gaW50ZXJjZXB0b3Jcbl9fd2VicGFja19yZXF1aXJlX18uaSA9IFtdO1xuXG4iLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmh1ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBcIm1haW5cIiArIFwiLmNzc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYgPSAoKSA9PiBcIm1haW4uXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNvblwiOyIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IFwiNTViNmIxYjhlOTE1YWIwN2EwNjFcIiIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkiLCJ2YXIgY3VycmVudE1vZHVsZURhdGEgPSB7fTtcbnZhciBpbnN0YWxsZWRNb2R1bGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jO1xuXG4vLyBtb2R1bGUgYW5kIHJlcXVpcmUgY3JlYXRpb25cbnZhciBjdXJyZW50Q2hpbGRNb2R1bGU7XG52YXIgY3VycmVudFBhcmVudHMgPSBbXTtcblxuLy8gc3RhdHVzXG52YXIgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzID0gW107XG52YXIgY3VycmVudFN0YXR1cyA9IFwiaWRsZVwiO1xuXG4vLyB3aGlsZSBkb3dubG9hZGluZ1xudmFyIGJsb2NraW5nUHJvbWlzZXM7XG5cbi8vIFRoZSB1cGRhdGUgaW5mb1xudmFyIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzO1xudmFyIHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckQgPSBjdXJyZW50TW9kdWxlRGF0YTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5pLnB1c2goZnVuY3Rpb24gKG9wdGlvbnMpIHtcblx0dmFyIG1vZHVsZSA9IG9wdGlvbnMubW9kdWxlO1xuXHR2YXIgcmVxdWlyZSA9IGNyZWF0ZVJlcXVpcmUob3B0aW9ucy5yZXF1aXJlLCBvcHRpb25zLmlkKTtcblx0bW9kdWxlLmhvdCA9IGNyZWF0ZU1vZHVsZUhvdE9iamVjdChvcHRpb25zLmlkLCBtb2R1bGUpO1xuXHRtb2R1bGUucGFyZW50cyA9IGN1cnJlbnRQYXJlbnRzO1xuXHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0b3B0aW9ucy5yZXF1aXJlID0gcmVxdWlyZTtcbn0pO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMgPSB7fTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1ySSA9IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVSZXF1aXJlKHJlcXVpcmUsIG1vZHVsZUlkKSB7XG5cdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuXHRpZiAoIW1lKSByZXR1cm4gcmVxdWlyZTtcblx0dmFyIGZuID0gZnVuY3Rpb24gKHJlcXVlc3QpIHtcblx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuXHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcblx0XHRcdFx0dmFyIHBhcmVudHMgPSBpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHM7XG5cdFx0XHRcdGlmIChwYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuXHRcdFx0XHRcdHBhcmVudHMucHVzaChtb2R1bGVJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcblx0XHRcdFx0Y3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcblx0XHRcdH1cblx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuXHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcblx0XHRcdFx0XHRyZXF1ZXN0ICtcblx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuXHRcdFx0XHRcdG1vZHVsZUlkXG5cdFx0XHQpO1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBbXTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlcXVpcmUocmVxdWVzdCk7XG5cdH07XG5cdHZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiAobmFtZSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiByZXF1aXJlW25hbWVdO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdHJlcXVpcmVbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXHRmb3IgKHZhciBuYW1lIGluIHJlcXVpcmUpIHtcblx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlcXVpcmUsIG5hbWUpICYmIG5hbWUgIT09IFwiZVwiKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcihuYW1lKSk7XG5cdFx0fVxuXHR9XG5cdGZuLmUgPSBmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdHJldHVybiB0cmFja0Jsb2NraW5nUHJvbWlzZShyZXF1aXJlLmUoY2h1bmtJZCkpO1xuXHR9O1xuXHRyZXR1cm4gZm47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU1vZHVsZUhvdE9iamVjdChtb2R1bGVJZCwgbWUpIHtcblx0dmFyIGhvdCA9IHtcblx0XHQvLyBwcml2YXRlIHN0dWZmXG5cdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuXHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuXHRcdF9zZWxmSW52YWxpZGF0ZWQ6IGZhbHNlLFxuXHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuXHRcdF9tYWluOiBjdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXHRcdF9yZXF1aXJlU2VsZjogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFBhcmVudHMgPSBtZS5wYXJlbnRzLnNsaWNlKCk7XG5cdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSBtb2R1bGVJZDtcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuXHRcdH0sXG5cblx0XHQvLyBNb2R1bGUgQVBJXG5cdFx0YWN0aXZlOiB0cnVlLFxuXHRcdGFjY2VwdDogZnVuY3Rpb24gKGRlcCwgY2FsbGJhY2spIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbiAoKSB7fTtcblx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0fSxcblx0XHRkZWNsaW5lOiBmdW5jdGlvbiAoZGVwKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuXHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuXHRcdH0sXG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXHRcdGludmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMuX3NlbGZJbnZhbGlkYXRlZCA9IHRydWU7XG5cdFx0XHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRcdFx0Y2FzZSBcImlkbGVcIjpcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdFx0Y2FzZSBcImNoZWNrXCI6XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlXCI6XG5cdFx0XHRcdGNhc2UgXCJhcHBseVwiOlxuXHRcdFx0XHRcdChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgfHwgW10pLnB1c2goXG5cdFx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0Ly8gaWdub3JlIHJlcXVlc3RzIGluIGVycm9yIHN0YXRlc1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuXHRcdGNoZWNrOiBob3RDaGVjayxcblx0XHRhcHBseTogaG90QXBwbHksXG5cdFx0c3RhdHVzOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0aWYgKCFsKSByZXR1cm4gY3VycmVudFN0YXR1cztcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHZhciBpZHggPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcblx0XHRcdGlmIChpZHggPj0gMCkgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cblx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcblx0XHRkYXRhOiBjdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cblx0fTtcblx0Y3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuXHRyZXR1cm4gaG90O1xufVxuXG5mdW5jdGlvbiBzZXRTdGF0dXMobmV3U3RhdHVzKSB7XG5cdGN1cnJlbnRTdGF0dXMgPSBuZXdTdGF0dXM7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuXHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG59XG5cbmZ1bmN0aW9uIHRyYWNrQmxvY2tpbmdQcm9taXNlKHByb21pc2UpIHtcblx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRzZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuXHRcdFx0YmxvY2tpbmdQcm9taXNlcy5wdXNoKHByb21pc2UpO1xuXHRcdFx0d2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdGJsb2NraW5nUHJvbWlzZXMucHVzaChwcm9taXNlKTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0fVxufVxuXG5mdW5jdGlvbiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbikge1xuXHRpZiAoYmxvY2tpbmdQcm9taXNlcy5sZW5ndGggPT09IDApIHJldHVybiBmbigpO1xuXHR2YXIgYmxvY2tlciA9IGJsb2NraW5nUHJvbWlzZXM7XG5cdGJsb2NraW5nUHJvbWlzZXMgPSBbXTtcblx0cmV0dXJuIFByb21pc2UuYWxsKGJsb2NrZXIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmbik7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBob3RDaGVjayhhcHBseU9uVXBkYXRlKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcImlkbGVcIikge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuXHR9XG5cdHNldFN0YXR1cyhcImNoZWNrXCIpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNKCkudGhlbihmdW5jdGlvbiAodXBkYXRlKSB7XG5cdFx0aWYgKCF1cGRhdGUpIHtcblx0XHRcdHNldFN0YXR1cyhhcHBseUludmFsaWRhdGVkTW9kdWxlcygpID8gXCJyZWFkeVwiIDogXCJpZGxlXCIpO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXG5cdFx0c2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcblxuXHRcdHZhciB1cGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRcdGJsb2NraW5nUHJvbWlzZXMgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKFxuXHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDKS5yZWR1Y2UoZnVuY3Rpb24gKFxuXHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0a2V5XG5cdFx0XHQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJDW2tleV0oXG5cdFx0XHRcdFx0dXBkYXRlLmMsXG5cdFx0XHRcdFx0dXBkYXRlLnIsXG5cdFx0XHRcdFx0dXBkYXRlLm0sXG5cdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMsXG5cdFx0XHRcdFx0dXBkYXRlZE1vZHVsZXNcblx0XHRcdFx0KTtcblx0XHRcdFx0cmV0dXJuIHByb21pc2VzO1xuXHRcdFx0fSxcblx0XHRcdFtdKVxuXHRcdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRpZiAoYXBwbHlPblVwZGF0ZSkge1xuXHRcdFx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KGFwcGx5T25VcGRhdGUpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHVwZGF0ZWRNb2R1bGVzO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwicmVhZHlcIikge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxBcHBseShvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7XG5cblx0dmFyIHJlc3VsdHMgPSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycy5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHtcblx0XHRyZXR1cm4gaGFuZGxlcihvcHRpb25zKTtcblx0fSk7XG5cdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gdW5kZWZpbmVkO1xuXG5cdHZhciBlcnJvcnMgPSByZXN1bHRzXG5cdFx0Lm1hcChmdW5jdGlvbiAocikge1xuXHRcdFx0cmV0dXJuIHIuZXJyb3I7XG5cdFx0fSlcblx0XHQuZmlsdGVyKEJvb2xlYW4pO1xuXG5cdGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuXHRcdHNldFN0YXR1cyhcImFib3J0XCIpO1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IGVycm9yc1swXTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuXHRzZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuXG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5kaXNwb3NlKSByZXN1bHQuZGlzcG9zZSgpO1xuXHR9KTtcblxuXHQvLyBOb3cgaW4gXCJhcHBseVwiIHBoYXNlXG5cdHNldFN0YXR1cyhcImFwcGx5XCIpO1xuXG5cdHZhciBlcnJvcjtcblx0dmFyIHJlcG9ydEVycm9yID0gZnVuY3Rpb24gKGVycikge1xuXHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuXHR9O1xuXG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0cmVzdWx0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXN1bHQpIHtcblx0XHRpZiAocmVzdWx0LmFwcGx5KSB7XG5cdFx0XHR2YXIgbW9kdWxlcyA9IHJlc3VsdC5hcHBseShyZXBvcnRFcnJvcik7XG5cdFx0XHRpZiAobW9kdWxlcykge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChtb2R1bGVzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG5cblx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcblx0aWYgKGVycm9yKSB7XG5cdFx0c2V0U3RhdHVzKFwiZmFpbFwiKTtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcjtcblx0XHR9KTtcblx0fVxuXG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7XG5cdFx0XHRvdXRkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0aWYgKGxpc3QuaW5kZXhPZihtb2R1bGVJZCkgPCAwKSBsaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gbGlzdDtcblx0XHR9KTtcblx0fVxuXG5cdHNldFN0YXR1cyhcImlkbGVcIik7XG5cdHJldHVybiBQcm9taXNlLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSB7XG5cdGlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcblx0XHRpZiAoIWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzKSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHVuZGVmaW5lZDtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxufSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG52YXIgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdDtcbnZhciB3YWl0aW5nVXBkYXRlUmVzb2x2ZXMgPSB7fTtcbmZ1bmN0aW9uIGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gcmVzb2x2ZTtcblx0XHQvLyBzdGFydCB1cGRhdGUgY2h1bmsgbG9hZGluZ1xuXHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmh1KGNodW5rSWQpO1xuXHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHRcdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkXG5cdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBob3QgdXBkYXRlIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkKTtcblx0fSk7XG59XG5cbnNlbGZbXCJ3ZWJwYWNrSG90VXBkYXRlYWpzXCJdID0gKGNodW5rSWQsIG1vcmVNb2R1bGVzLCBydW50aW1lKSA9PiB7XG5cdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHRpZihjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0KSBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0LnB1c2gobW9kdWxlSWQpO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBjdXJyZW50VXBkYXRlUnVudGltZS5wdXNoKHJ1bnRpbWUpO1xuXHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0oKTtcblx0XHR3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdH1cbn07XG5cbnZhciBjdXJyZW50VXBkYXRlQ2h1bmtzO1xudmFyIGN1cnJlbnRVcGRhdGU7XG52YXIgY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZVJ1bnRpbWU7XG5mdW5jdGlvbiBhcHBseUhhbmRsZXIob3B0aW9ucykge1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSBkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0gdW5kZWZpbmVkO1xuXHRmdW5jdGlvbiBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHModXBkYXRlTW9kdWxlSWQpIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcblxuXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5tYXAoZnVuY3Rpb24gKGlkKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRjaGFpbjogW2lkXSxcblx0XHRcdFx0aWQ6IGlkXG5cdFx0XHR9O1xuXHRcdH0pO1xuXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG5cdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG5cdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG5cdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdGlmIChcblx0XHRcdFx0IW1vZHVsZSB8fFxuXHRcdFx0XHQobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkICYmICFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWQpXG5cdFx0XHQpXG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuXHRcdFx0XHRcdGNoYWluOiBjaGFpbixcblx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcblx0XHRcdFx0dmFyIHBhcmVudCA9IF9fd2VicGFja19yZXF1aXJlX18uY1twYXJlbnRJZF07XG5cdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcblx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcblx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcblx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuXHRcdFx0XHRxdWV1ZS5wdXNoKHtcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuXHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuXHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuXHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG5cdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcblx0XHR9O1xuXHR9XG5cblx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuXHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcblx0XHR9XG5cdH1cblxuXHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuXHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG5cdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cblx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZShtb2R1bGUpIHtcblx0XHRjb25zb2xlLndhcm4oXG5cdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIG1vZHVsZS5pZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuXHRcdCk7XG5cdH07XG5cblx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gY3VycmVudFVwZGF0ZSkge1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0XHR2YXIgbmV3TW9kdWxlRmFjdG9yeSA9IGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdO1xuXHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuXHRcdFx0dmFyIHJlc3VsdDtcblx0XHRcdGlmIChuZXdNb2R1bGVGYWN0b3J5KSB7XG5cdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyhtb2R1bGVJZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQgPSB7XG5cdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cblx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuXHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuXHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG5cdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG5cdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcblx0XHRcdH1cblx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcblx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuXHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcblx0XHRcdH1cblx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZXJyb3I6IGFib3J0RXJyb3Jcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdGlmIChkb0FwcGx5KSB7XG5cdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gbmV3TW9kdWxlRmFjdG9yeTtcblx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcblx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG5cdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuXHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGN1cnJlbnRVcGRhdGUgPSB1bmRlZmluZWQ7XG5cblx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuXHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG5cdGZvciAodmFyIGogPSAwOyBqIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaisrKSB7XG5cdFx0dmFyIG91dGRhdGVkTW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbal07XG5cdFx0aWYgKFxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdICYmXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWQgJiZcblx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcblx0XHRcdGFwcGxpZWRVcGRhdGVbb3V0ZGF0ZWRNb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZSAmJlxuXHRcdFx0Ly8gd2hlbiBjYWxsZWQgaW52YWxpZGF0ZSBzZWxmLWFjY2VwdGluZyBpcyBub3QgcG9zc2libGVcblx0XHRcdCFfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0uaG90Ll9zZWxmSW52YWxpZGF0ZWRcblx0XHQpIHtcblx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcblx0XHRcdFx0bW9kdWxlOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRyZXF1aXJlOiBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0uaG90Ll9yZXF1aXJlU2VsZixcblx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcblxuXHRyZXR1cm4ge1xuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdH0pO1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSB1bmRlZmluZWQ7XG5cblx0XHRcdHZhciBpZHg7XG5cdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcblx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuXHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblx0XHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG5cdFx0XHRcdHZhciBkYXRhID0ge307XG5cblx0XHRcdFx0Ly8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzXG5cdFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRkaXNwb3NlSGFuZGxlcnNbal0uY2FsbChudWxsLCBkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckRbbW9kdWxlSWRdID0gZGF0YTtcblxuXHRcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuXHRcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuXHRcdFx0XHRkZWxldGUgX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG5cdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdHZhciBjaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuXHRcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG5cdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG5cdFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuXHRcdFx0dmFyIGRlcGVuZGVuY3k7XG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0bW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhcHBseTogZnVuY3Rpb24gKHJlcG9ydEVycm9yKSB7XG5cdFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcblx0XHRcdGZvciAodmFyIHVwZGF0ZU1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhhcHBsaWVkVXBkYXRlLCB1cGRhdGVNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bdXBkYXRlTW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVt1cGRhdGVNb2R1bGVJZF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcnVuIG5ldyBydW50aW1lIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFVwZGF0ZVJ1bnRpbWUubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWVbaV0oX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG5cdFx0XHRmb3IgKHZhciBvdXRkYXRlZE1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG91dGRhdGVkTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHR2YXIgYWNjZXB0Q2FsbGJhY2sgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHRpZiAoYWNjZXB0Q2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoYWNjZXB0Q2FsbGJhY2spICE9PSAtMSkgY29udGludWU7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goYWNjZXB0Q2FsbGJhY2spO1xuXHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcy5wdXNoKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IGNhbGxiYWNrcy5sZW5ndGg7IGsrKykge1xuXHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrc1trXS5jYWxsKG51bGwsIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcblx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBvID0gMDsgbyA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IG8rKykge1xuXHRcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tvXTtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aXRlbS5yZXF1aXJlKG1vZHVsZUlkKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRyZXBvcnRFcnJvcihlcnIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzO1xuXHRcdH1cblx0fTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1ySS5qc29ucCA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgYXBwbHlIYW5kbGVycykge1xuXHRpZiAoIWN1cnJlbnRVcGRhdGUpIHtcblx0XHRjdXJyZW50VXBkYXRlID0ge307XG5cdFx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IFtdO1xuXHRcdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHR9XG5cdGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkge1xuXHRcdGN1cnJlbnRVcGRhdGVbbW9kdWxlSWRdID0gX193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXTtcblx0fVxufTtcbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5qc29ucCA9IGZ1bmN0aW9uIChcblx0Y2h1bmtJZHMsXG5cdHJlbW92ZWRDaHVua3MsXG5cdHJlbW92ZWRNb2R1bGVzLFxuXHRwcm9taXNlcyxcblx0YXBwbHlIYW5kbGVycyxcblx0dXBkYXRlZE1vZHVsZXNMaXN0XG4pIHtcblx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB7fTtcblx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSByZW1vdmVkQ2h1bmtzO1xuXHRjdXJyZW50VXBkYXRlID0gcmVtb3ZlZE1vZHVsZXMucmVkdWNlKGZ1bmN0aW9uIChvYmosIGtleSkge1xuXHRcdG9ialtrZXldID0gZmFsc2U7XG5cdFx0cmV0dXJuIG9iajtcblx0fSwge30pO1xuXHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRjaHVua0lkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0aWYgKFxuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiZcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0KSB7XG5cdFx0XHRwcm9taXNlcy5wdXNoKGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpKTtcblx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSB0cnVlO1xuXHRcdH1cblx0fSk7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXIgPSBmdW5jdGlvbiAoY2h1bmtJZCwgcHJvbWlzZXMpIHtcblx0XHRcdGlmIChcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rcyAmJlxuXHRcdFx0XHQhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGVDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSAhPT0gdW5kZWZpbmVkXG5cdFx0XHQpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkpO1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0gPSAoKSA9PiB7XG5cdGlmICh0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHRocm93IG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydDogbmVlZCBmZXRjaCBBUElcIik7XG5cdHJldHVybiBmZXRjaChfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYoKSkudGhlbigocmVzcG9uc2UpID0+IHtcblx0XHRpZihyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgcmV0dXJuOyAvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG5cdFx0aWYoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggdXBkYXRlIG1hbmlmZXN0IFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblx0fSk7XG59O1xuXG4vLyBubyBkZWZlcnJlZCBzdGFydHVwXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uXG5cbi8vIG5vIGRlZmVycmVkIHN0YXJ0dXAiLCIvLyBtb2R1bGUgY2FjaGUgYXJlIHVzZWQgc28gZW50cnkgaW5saW5pbmcgaXMgZGlzYWJsZWRcbi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlXG5fX3dlYnBhY2tfcmVxdWlyZV9fKDExNTEpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==